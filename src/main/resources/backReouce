package traffic;

import org.codehaus.jackson.map.ObjectMapper;
import redis.clients.jedis.HostAndPort;
import redis.clients.jedis.JedisCluster;
import redis.clients.jedis.JedisPool;

import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import java.io.*;
import java.text.DecimalFormat;
import java.util.*;
import java.util.concurrent.ThreadLocalRandom;
import java.util.concurrent.atomic.AtomicLong;

/**
 * Created by xuefei_wang on 16-12-13.
 */
@Path("/statistics")
public class TrafficResource {



    private  JedisCluster jc;

    private static  String statistics = "statistics";
    private static ThreadLocalRandom random = ThreadLocalRandom.current();
    private static ObjectMapper objectMapper = new ObjectMapper();
    private static String[] citys = {"四川省","贵州省","云南省","重庆市","河北省","山西省","江苏省","浙江省","安徽省","江西省","山东省","河南省","湖北省","湖南省","陕西省","甘肃省","北京市","天津市","上海市","广东省","海南省","福建省","青海省","辽宁省","吉林省","黑龙江省"};

    private static HashMap<String,Integer> vehicleCount = new HashMap<String,Integer>();
    private  static String[] cos = {"成都","眉山","德阳","资阳","绵阳","雅安","乐山","自贡","泸州","广安","巴中","广元","遂宁","内江","宜宾","南充","达州","攀枝花",
    "阿坝","甘孜 ","凉山"};
    private  int len ;

    private HashMap<String,Integer> vehicleChengDuCount = new HashMap<String,Integer>();
    private  int len2 ;
    private static  AtomicLong c = new AtomicLong();
    private  static  int deviceNumber = 300;
    private static Vector<String>  localtios = null;
    private static DecimalFormat df = new DecimalFormat("#.###");

    public TrafficResource(){

        System.out.println("Init resouce");

        Set<HostAndPort> jedisClusterNodes = new HashSet<HostAndPort>();

        jedisClusterNodes.add(new HostAndPort("suna", 7000));
        jedisClusterNodes.add(new HostAndPort("sunb", 7000));
        jedisClusterNodes.add(new HostAndPort("sunc", 7000));

        jedisClusterNodes.add(new HostAndPort("suna", 7001));
        jedisClusterNodes.add(new HostAndPort("sunb", 7001));
        jedisClusterNodes.add(new HostAndPort("sunc", 7001));

        this.jc = new JedisCluster(jedisClusterNodes);



        len = citys.length;
        len2 = cos.length;
        System.out.println(c.getAndIncrement());
        for (String city : citys) {
                //if (!vehicleCount.containsKey(city)){
                    vehicleCount.put(city,0);
              //  }
        }
        if (localtios == null){
            String path = System.getProperty("user.dir") + "/src/main/resources/longAndLati.text";
            localtios = new Vector<String>();
            try {
                FileReader   reader = new FileReader(new File(path));
                BufferedReader br = new BufferedReader(reader);
                String str = null;
                while ((str = br.readLine()) != null) {
                    localtios.add(str);
                }
                br.close();
                reader.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        if (vehicleChengDuCount.size() == 0){
            vehicleChengDuCount.clear();
            for (String c : cos){
                vehicleChengDuCount.put(c,0);
            }
        }
    }




    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public Response vehicle() {
        HashMap content = new HashMap<String,Object>();
        for (int i =1 ;i <deviceNumber ;i++){
            HashMap detailContent = new HashMap<String,String>();
            detailContent.put("B",String.valueOf(random.nextInt(0,5)));
            detailContent.put("M",String.valueOf(random.nextInt(0,10)));
            detailContent.put("S",String.valueOf(random.nextInt(0,30)));
            detailContent.put("O",String.valueOf(random.nextInt(0,15)));
            content.put(String.valueOf(i),detailContent);
        }
        StringWriter stringWriter = new StringWriter();
        try {
            objectMapper.writeValue(stringWriter,content);
        } catch (IOException e) {
            e.printStackTrace();
        }
        return Response.status(200).header("Access-Control-Allow-Origin", "*").entity(stringWriter.toString()).build();
    }

    @GET
    @Path("/count")
    @Produces(MediaType.TEXT_PLAIN)
    public Response vehicleCount() {
        HashMap content = new HashMap<String,Object>();
        for (int i =0 ;i <len ;i++){
                String city = null ;
            int count = 0;
            if (i == 0){
                continue;
//                city = citys[i];
//                 count =  vehicleCount.get(city) + Math.abs((100-random.nextInt(1,10))*(random.nextInt(33,78)-i));
            }else {
                city = citys[i];
                count =  vehicleCount.get(city) + Math.abs((30-i)*(random.nextInt(0,7)));
            }

                vehicleCount.put(city,count);
            content.put(citys[i],count);
        }
        StringWriter stringWriter = new StringWriter();
        try {
            objectMapper.writeValue(stringWriter,content);
        } catch (IOException e) {
            e.printStackTrace();
        }
        return Response.status(200).header("Access-Control-Allow-Origin", "*").entity(stringWriter.toString()).build();
    }


    @GET
    @Path("/sichuan")
    @Produces(MediaType.TEXT_PLAIN)
    public Response vehicleSiChuanCount() {
        HashMap content = new HashMap<String,Object>();
        for (int i =0 ;i <len2 ;i++){
            String c = cos[i] ;
            int count = 0;
            if (i == 0){
                 count =  vehicleChengDuCount.get(c) + Math.abs((200-random.nextInt(4,10))*(random.nextInt(33,78)-i));
            }else {
                count =  vehicleChengDuCount.get(c) + Math.abs((30-i)*(random.nextInt(3,13)));
            }
            vehicleChengDuCount.put(c,count);
            content.put(c,count);
        }
        StringWriter stringWriter = new StringWriter();
        try {
            objectMapper.writeValue(stringWriter,content);
        } catch (IOException e) {
            e.printStackTrace();
        }
        return Response.status(200).header("Access-Control-Allow-Origin", "*").entity(stringWriter.toString()).build();
    }



    @GET
    @Path("/map")
    @Produces(MediaType.TEXT_PLAIN)
    public Response vehicleMap() {
        int k = random.nextInt(500,2500);
        ArrayList l1 = new ArrayList();
        for (int i =0 ;i < k ;i++) {
            ArrayList l2 = new ArrayList();
            String[] local = localtios.get(random.nextInt(0, localtios.size()-1)).split(",");
            l2.add(local[0]);
            l2.add(local[1]);
            l2.add(1);
            l1.add(l2);
        }
        StringWriter stringWriter = new StringWriter();
        try {
            objectMapper.writeValue(stringWriter,l1);
        } catch (IOException e) {
            e.printStackTrace();
        }
        return Response.status(200).header("Access-Control-Allow-Origin", "*").entity(stringWriter.toString()).build();
    }

    @GET
    @Path("/mining")
    @Produces(MediaType.TEXT_PLAIN)
    public Response vehicleMining(){
        ArrayList l1 = new ArrayList();
        for (int i =0 ;i < 90 ;i++) {
            HashMap<String , Object> minidata = new HashMap<String,Object>() ;
            //变道频率
            double vclf = random.nextDouble(0, 0.678);
            //大车平均车速
            double BAS = random.nextDouble(5,80);
            //小车平均车速
            double SAS = random.nextDouble(BAS*0.6,BAS*1.5);
            //大气湿度
            double AH = random.nextDouble(0.4,0.6);
            //大气温度
            double AT = random.nextDouble(5,9);
            //大车密度（每千米拥有的车辆数）
            double BD = (1-(vclf*BAS)/55.0)*0.2;
            //小车密度
            double SD =(1-(vclf*SAS)/82.0)*0.2;
            //驾驶员男女比例
            double MW = vclf*1.23;
            //映射区间值
            double TJP = ((1- 1 / (1+Math.pow(Math.E,(BD*1.4+SD))))-0.518)*9.9;


            double CAP = logisticRegression(vclf,BAS,SAS,AH,AT,BD,SD,MW,TJP) * random.nextDouble(0.10,0.70);

            minidata.put("roadID",i+1);
            minidata.put("VCLF",Double.valueOf(df.format(vclf)));
            minidata.put("BAS", Double.valueOf(df.format(BAS)));
            minidata.put("SAS",Double.valueOf(df.format(SAS)));
            minidata.put("AH",Double.valueOf(df.format(AH)));
            minidata.put("AT", Double.valueOf(df.format(AT)));
            minidata.put("BD",  Double.valueOf(df.format(BD)));
            minidata.put("SD",  Double.valueOf(df.format(SD)));
            minidata.put("MW", Double.valueOf(df.format(MW)) );
            minidata.put("CAP",  Double.valueOf(df.format(CAP)));
            minidata.put("TJP", Double.valueOf(df.format(TJP)));
            l1.add(minidata);
        }
        StringWriter stringWriter = new StringWriter();
        try {
            objectMapper.writeValue(stringWriter,l1);
        } catch (IOException e) {
            e.printStackTrace();
        }
        return Response.status(200).header("Access-Control-Allow-Origin", "*").entity(stringWriter.toString()).build();
    }


    public static double logisticRegression(
            double vclf,
            double BAS,
            double SAS,
            double AH,
            double AT,
            double BD,
            double SD,
            double MW,
            double CJP
    ){

        float w1 =17;
        float w2 =0.5f;
        float w3 =0.5f;
        float w4 =4;
        float w5 =3;
        float w6 =12.3f;
        float w7 =11.7f;
        float w8 =3.8f;
        float w9 =3.4f;
        //权重偏移
        double  fx = w1*vclf + (BAS/80)*w2 + w3*(SAS/120) + w4*AH + w5*(AT/10) + w6*BD + w7*SD +w8*MW + w9*CJP ;
       //修正函数
        double gx = Math.pow(10,fx-14);
        double p = 1 / (1+Math.pow(Math.E, gx)) ;
        return  p ;

    }
}
