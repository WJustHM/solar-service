// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OffenceSnapData.proto

package protobuf;

public final class OffenceSnapDataProtos {
    private OffenceSnapDataProtos() {
    }

    public static void registerAllExtensions(
            com.google.protobuf.ExtensionRegistry registry) {
    }

    public interface PlateInfoModelOrBuilder
            extends com.google.protobuf.MessageOrBuilder {

        // optional string PlateType = 1;

        /**
         * <code>optional string PlateType = 1;</code>
         */
        boolean hasPlateType();

        /**
         * <code>optional string PlateType = 1;</code>
         */
        String getPlateType();

        /**
         * <code>optional string PlateType = 1;</code>
         */
        com.google.protobuf.ByteString
        getPlateTypeBytes();

        // optional string Color = 2;

        /**
         * <code>optional string Color = 2;</code>
         */
        boolean hasColor();

        /**
         * <code>optional string Color = 2;</code>
         */
        String getColor();

        /**
         * <code>optional string Color = 2;</code>
         */
        com.google.protobuf.ByteString
        getColorBytes();

        // required int32 Bright = 3;

        /**
         * <code>required int32 Bright = 3;</code>
         */
        boolean hasBright();

        /**
         * <code>required int32 Bright = 3;</code>
         */
        int getBright();

        // required int32 LicenseLen = 4;

        /**
         * <code>required int32 LicenseLen = 4;</code>
         */
        boolean hasLicenseLen();

        /**
         * <code>required int32 LicenseLen = 4;</code>
         */
        int getLicenseLen();

        // required int32 Country = 5;

        /**
         * <code>required int32 Country = 5;</code>
         */
        boolean hasCountry();

        /**
         * <code>required int32 Country = 5;</code>
         */
        int getCountry();

        // required string License = 6;

        /**
         * <code>required string License = 6;</code>
         */
        boolean hasLicense();

        /**
         * <code>required string License = 6;</code>
         */
        String getLicense();

        /**
         * <code>required string License = 6;</code>
         */
        com.google.protobuf.ByteString
        getLicenseBytes();

        // required string Believe = 7;

        /**
         * <code>required string Believe = 7;</code>
         */
        boolean hasBelieve();

        /**
         * <code>required string Believe = 7;</code>
         */
        String getBelieve();

        /**
         * <code>required string Believe = 7;</code>
         */
        com.google.protobuf.ByteString
        getBelieveBytes();
    }

    /**
     * Protobuf type {@code PlateInfoModel}
     */
    public static final class PlateInfoModel extends
            com.google.protobuf.GeneratedMessage
            implements PlateInfoModelOrBuilder {
        // Use PlateInfoModel.newBuilder() to construct.
        private PlateInfoModel(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.unknownFields = builder.getUnknownFields();
        }

        private PlateInfoModel(boolean noInit) {
            this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private static final PlateInfoModel defaultInstance;

        public static PlateInfoModel getDefaultInstance() {
            return defaultInstance;
        }

        public PlateInfoModel getDefaultInstanceForType() {
            return defaultInstance;
        }

        private final com.google.protobuf.UnknownFieldSet unknownFields;

        @Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return this.unknownFields;
        }

        private PlateInfoModel(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            initFields();
            int mutable_bitField0_ = 0;
            com.google.protobuf.UnknownFieldSet.Builder unknownFields =
                    com.google.protobuf.UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!parseUnknownField(input, unknownFields,
                                    extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 10: {
                            bitField0_ |= 0x00000001;
                            plateType_ = input.readBytes();
                            break;
                        }
                        case 18: {
                            bitField0_ |= 0x00000002;
                            color_ = input.readBytes();
                            break;
                        }
                        case 24: {
                            bitField0_ |= 0x00000004;
                            bright_ = input.readInt32();
                            break;
                        }
                        case 32: {
                            bitField0_ |= 0x00000008;
                            licenseLen_ = input.readInt32();
                            break;
                        }
                        case 40: {
                            bitField0_ |= 0x00000010;
                            country_ = input.readInt32();
                            break;
                        }
                        case 50: {
                            bitField0_ |= 0x00000020;
                            license_ = input.readBytes();
                            break;
                        }
                        case 58: {
                            bitField0_ |= 0x00000040;
                            believe_ = input.readBytes();
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e.getMessage()).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return OffenceSnapDataProtos.internal_static_PlateInfoModel_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return OffenceSnapDataProtos.internal_static_PlateInfoModel_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            PlateInfoModel.class, Builder.class);
        }

        public static com.google.protobuf.Parser<PlateInfoModel> PARSER =
                new com.google.protobuf.AbstractParser<PlateInfoModel>() {
                    public PlateInfoModel parsePartialFrom(
                            com.google.protobuf.CodedInputStream input,
                            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                            throws com.google.protobuf.InvalidProtocolBufferException {
                        return new PlateInfoModel(input, extensionRegistry);
                    }
                };

        @Override
        public com.google.protobuf.Parser<PlateInfoModel> getParserForType() {
            return PARSER;
        }

        private int bitField0_;
        // optional string PlateType = 1;
        public static final int PLATETYPE_FIELD_NUMBER = 1;
        private Object plateType_;

        /**
         * <code>optional string PlateType = 1;</code>
         */
        public boolean hasPlateType() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }

        /**
         * <code>optional string PlateType = 1;</code>
         */
        public String getPlateType() {
            Object ref = plateType_;
            if (ref instanceof String) {
                return (String) ref;
            } else {
                com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                String s = bs.toStringUtf8();
                if (bs.isValidUtf8()) {
                    plateType_ = s;
                }
                return s;
            }
        }

        /**
         * <code>optional string PlateType = 1;</code>
         */
        public com.google.protobuf.ByteString
        getPlateTypeBytes() {
            Object ref = plateType_;
            if (ref instanceof String) {
                com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8(
                                (String) ref);
                plateType_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        // optional string Color = 2;
        public static final int COLOR_FIELD_NUMBER = 2;
        private Object color_;

        /**
         * <code>optional string Color = 2;</code>
         */
        public boolean hasColor() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
        }

        /**
         * <code>optional string Color = 2;</code>
         */
        public String getColor() {
            Object ref = color_;
            if (ref instanceof String) {
                return (String) ref;
            } else {
                com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                String s = bs.toStringUtf8();
                if (bs.isValidUtf8()) {
                    color_ = s;
                }
                return s;
            }
        }

        /**
         * <code>optional string Color = 2;</code>
         */
        public com.google.protobuf.ByteString
        getColorBytes() {
            Object ref = color_;
            if (ref instanceof String) {
                com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8(
                                (String) ref);
                color_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        // required int32 Bright = 3;
        public static final int BRIGHT_FIELD_NUMBER = 3;
        private int bright_;

        /**
         * <code>required int32 Bright = 3;</code>
         */
        public boolean hasBright() {
            return ((bitField0_ & 0x00000004) == 0x00000004);
        }

        /**
         * <code>required int32 Bright = 3;</code>
         */
        public int getBright() {
            return bright_;
        }

        // required int32 LicenseLen = 4;
        public static final int LICENSELEN_FIELD_NUMBER = 4;
        private int licenseLen_;

        /**
         * <code>required int32 LicenseLen = 4;</code>
         */
        public boolean hasLicenseLen() {
            return ((bitField0_ & 0x00000008) == 0x00000008);
        }

        /**
         * <code>required int32 LicenseLen = 4;</code>
         */
        public int getLicenseLen() {
            return licenseLen_;
        }

        // required int32 Country = 5;
        public static final int COUNTRY_FIELD_NUMBER = 5;
        private int country_;

        /**
         * <code>required int32 Country = 5;</code>
         */
        public boolean hasCountry() {
            return ((bitField0_ & 0x00000010) == 0x00000010);
        }

        /**
         * <code>required int32 Country = 5;</code>
         */
        public int getCountry() {
            return country_;
        }

        // required string License = 6;
        public static final int LICENSE_FIELD_NUMBER = 6;
        private Object license_;

        /**
         * <code>required string License = 6;</code>
         */
        public boolean hasLicense() {
            return ((bitField0_ & 0x00000020) == 0x00000020);
        }

        /**
         * <code>required string License = 6;</code>
         */
        public String getLicense() {
            Object ref = license_;
            if (ref instanceof String) {
                return (String) ref;
            } else {
                com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                String s = bs.toStringUtf8();
                if (bs.isValidUtf8()) {
                    license_ = s;
                }
                return s;
            }
        }

        /**
         * <code>required string License = 6;</code>
         */
        public com.google.protobuf.ByteString
        getLicenseBytes() {
            Object ref = license_;
            if (ref instanceof String) {
                com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8(
                                (String) ref);
                license_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        // required string Believe = 7;
        public static final int BELIEVE_FIELD_NUMBER = 7;
        private Object believe_;

        /**
         * <code>required string Believe = 7;</code>
         */
        public boolean hasBelieve() {
            return ((bitField0_ & 0x00000040) == 0x00000040);
        }

        /**
         * <code>required string Believe = 7;</code>
         */
        public String getBelieve() {
            Object ref = believe_;
            if (ref instanceof String) {
                return (String) ref;
            } else {
                com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                String s = bs.toStringUtf8();
                if (bs.isValidUtf8()) {
                    believe_ = s;
                }
                return s;
            }
        }

        /**
         * <code>required string Believe = 7;</code>
         */
        public com.google.protobuf.ByteString
        getBelieveBytes() {
            Object ref = believe_;
            if (ref instanceof String) {
                com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8(
                                (String) ref);
                believe_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        private void initFields() {
            plateType_ = "";
            color_ = "";
            bright_ = 0;
            licenseLen_ = 0;
            country_ = 0;
            license_ = "";
            believe_ = "";
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized != -1) return isInitialized == 1;

            if (!hasBright()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasLicenseLen()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasCountry()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasLicense()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasBelieve()) {
                memoizedIsInitialized = 0;
                return false;
            }
            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            getSerializedSize();
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                output.writeBytes(1, getPlateTypeBytes());
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                output.writeBytes(2, getColorBytes());
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                output.writeInt32(3, bright_);
            }
            if (((bitField0_ & 0x00000008) == 0x00000008)) {
                output.writeInt32(4, licenseLen_);
            }
            if (((bitField0_ & 0x00000010) == 0x00000010)) {
                output.writeInt32(5, country_);
            }
            if (((bitField0_ & 0x00000020) == 0x00000020)) {
                output.writeBytes(6, getLicenseBytes());
            }
            if (((bitField0_ & 0x00000040) == 0x00000040)) {
                output.writeBytes(7, getBelieveBytes());
            }
            getUnknownFields().writeTo(output);
        }

        private int memoizedSerializedSize = -1;

        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(1, getPlateTypeBytes());
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(2, getColorBytes());
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(3, bright_);
            }
            if (((bitField0_ & 0x00000008) == 0x00000008)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(4, licenseLen_);
            }
            if (((bitField0_ & 0x00000010) == 0x00000010)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(5, country_);
            }
            if (((bitField0_ & 0x00000020) == 0x00000020)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(6, getLicenseBytes());
            }
            if (((bitField0_ & 0x00000040) == 0x00000040)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(7, getBelieveBytes());
            }
            size += getUnknownFields().getSerializedSize();
            memoizedSerializedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @Override
        protected Object writeReplace()
                throws java.io.ObjectStreamException {
            return super.writeReplace();
        }

        public static PlateInfoModel parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static PlateInfoModel parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static PlateInfoModel parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static PlateInfoModel parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static PlateInfoModel parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static PlateInfoModel parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static PlateInfoModel parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input);
        }

        public static PlateInfoModel parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static PlateInfoModel parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static PlateInfoModel parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(PlateInfoModel prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        @Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * Protobuf type {@code PlateInfoModel}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessage.Builder<Builder>
                implements PlateInfoModelOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return OffenceSnapDataProtos.internal_static_PlateInfoModel_descriptor;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return OffenceSnapDataProtos.internal_static_PlateInfoModel_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                PlateInfoModel.class, Builder.class);
            }

            // Construct using com.kmlc.protobuf.OffenceSnapDataProtos.PlateInfoModel.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
                }
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                plateType_ = "";
                bitField0_ = (bitField0_ & ~0x00000001);
                color_ = "";
                bitField0_ = (bitField0_ & ~0x00000002);
                bright_ = 0;
                bitField0_ = (bitField0_ & ~0x00000004);
                licenseLen_ = 0;
                bitField0_ = (bitField0_ & ~0x00000008);
                country_ = 0;
                bitField0_ = (bitField0_ & ~0x00000010);
                license_ = "";
                bitField0_ = (bitField0_ & ~0x00000020);
                believe_ = "";
                bitField0_ = (bitField0_ & ~0x00000040);
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return OffenceSnapDataProtos.internal_static_PlateInfoModel_descriptor;
            }

            public PlateInfoModel getDefaultInstanceForType() {
                return PlateInfoModel.getDefaultInstance();
            }

            public PlateInfoModel build() {
                PlateInfoModel result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public PlateInfoModel buildPartial() {
                PlateInfoModel result = new PlateInfoModel(this);
                int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
                    to_bitField0_ |= 0x00000001;
                }
                result.plateType_ = plateType_;
                if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
                    to_bitField0_ |= 0x00000002;
                }
                result.color_ = color_;
                if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
                    to_bitField0_ |= 0x00000004;
                }
                result.bright_ = bright_;
                if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
                    to_bitField0_ |= 0x00000008;
                }
                result.licenseLen_ = licenseLen_;
                if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
                    to_bitField0_ |= 0x00000010;
                }
                result.country_ = country_;
                if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
                    to_bitField0_ |= 0x00000020;
                }
                result.license_ = license_;
                if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
                    to_bitField0_ |= 0x00000040;
                }
                result.believe_ = believe_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof PlateInfoModel) {
                    return mergeFrom((PlateInfoModel) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(PlateInfoModel other) {
                if (other == PlateInfoModel.getDefaultInstance()) return this;
                if (other.hasPlateType()) {
                    bitField0_ |= 0x00000001;
                    plateType_ = other.plateType_;
                    onChanged();
                }
                if (other.hasColor()) {
                    bitField0_ |= 0x00000002;
                    color_ = other.color_;
                    onChanged();
                }
                if (other.hasBright()) {
                    setBright(other.getBright());
                }
                if (other.hasLicenseLen()) {
                    setLicenseLen(other.getLicenseLen());
                }
                if (other.hasCountry()) {
                    setCountry(other.getCountry());
                }
                if (other.hasLicense()) {
                    bitField0_ |= 0x00000020;
                    license_ = other.license_;
                    onChanged();
                }
                if (other.hasBelieve()) {
                    bitField0_ |= 0x00000040;
                    believe_ = other.believe_;
                    onChanged();
                }
                this.mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasBright()) {

                    return false;
                }
                if (!hasLicenseLen()) {

                    return false;
                }
                if (!hasCountry()) {

                    return false;
                }
                if (!hasLicense()) {

                    return false;
                }
                if (!hasBelieve()) {

                    return false;
                }
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                PlateInfoModel parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (PlateInfoModel) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private int bitField0_;

            // optional string PlateType = 1;
            private Object plateType_ = "";

            /**
             * <code>optional string PlateType = 1;</code>
             */
            public boolean hasPlateType() {
                return ((bitField0_ & 0x00000001) == 0x00000001);
            }

            /**
             * <code>optional string PlateType = 1;</code>
             */
            public String getPlateType() {
                Object ref = plateType_;
                if (!(ref instanceof String)) {
                    String s = ((com.google.protobuf.ByteString) ref)
                            .toStringUtf8();
                    plateType_ = s;
                    return s;
                } else {
                    return (String) ref;
                }
            }

            /**
             * <code>optional string PlateType = 1;</code>
             */
            public com.google.protobuf.ByteString
            getPlateTypeBytes() {
                Object ref = plateType_;
                if (ref instanceof String) {
                    com.google.protobuf.ByteString b =
                            com.google.protobuf.ByteString.copyFromUtf8(
                                    (String) ref);
                    plateType_ = b;
                    return b;
                } else {
                    return (com.google.protobuf.ByteString) ref;
                }
            }

            /**
             * <code>optional string PlateType = 1;</code>
             */
            public Builder setPlateType(
                    String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000001;
                plateType_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional string PlateType = 1;</code>
             */
            public Builder clearPlateType() {
                bitField0_ = (bitField0_ & ~0x00000001);
                plateType_ = getDefaultInstance().getPlateType();
                onChanged();
                return this;
            }

            /**
             * <code>optional string PlateType = 1;</code>
             */
            public Builder setPlateTypeBytes(
                    com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000001;
                plateType_ = value;
                onChanged();
                return this;
            }

            // optional string Color = 2;
            private Object color_ = "";

            /**
             * <code>optional string Color = 2;</code>
             */
            public boolean hasColor() {
                return ((bitField0_ & 0x00000002) == 0x00000002);
            }

            /**
             * <code>optional string Color = 2;</code>
             */
            public String getColor() {
                Object ref = color_;
                if (!(ref instanceof String)) {
                    String s = ((com.google.protobuf.ByteString) ref)
                            .toStringUtf8();
                    color_ = s;
                    return s;
                } else {
                    return (String) ref;
                }
            }

            /**
             * <code>optional string Color = 2;</code>
             */
            public com.google.protobuf.ByteString
            getColorBytes() {
                Object ref = color_;
                if (ref instanceof String) {
                    com.google.protobuf.ByteString b =
                            com.google.protobuf.ByteString.copyFromUtf8(
                                    (String) ref);
                    color_ = b;
                    return b;
                } else {
                    return (com.google.protobuf.ByteString) ref;
                }
            }

            /**
             * <code>optional string Color = 2;</code>
             */
            public Builder setColor(
                    String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000002;
                color_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional string Color = 2;</code>
             */
            public Builder clearColor() {
                bitField0_ = (bitField0_ & ~0x00000002);
                color_ = getDefaultInstance().getColor();
                onChanged();
                return this;
            }

            /**
             * <code>optional string Color = 2;</code>
             */
            public Builder setColorBytes(
                    com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000002;
                color_ = value;
                onChanged();
                return this;
            }

            // required int32 Bright = 3;
            private int bright_;

            /**
             * <code>required int32 Bright = 3;</code>
             */
            public boolean hasBright() {
                return ((bitField0_ & 0x00000004) == 0x00000004);
            }

            /**
             * <code>required int32 Bright = 3;</code>
             */
            public int getBright() {
                return bright_;
            }

            /**
             * <code>required int32 Bright = 3;</code>
             */
            public Builder setBright(int value) {
                bitField0_ |= 0x00000004;
                bright_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required int32 Bright = 3;</code>
             */
            public Builder clearBright() {
                bitField0_ = (bitField0_ & ~0x00000004);
                bright_ = 0;
                onChanged();
                return this;
            }

            // required int32 LicenseLen = 4;
            private int licenseLen_;

            /**
             * <code>required int32 LicenseLen = 4;</code>
             */
            public boolean hasLicenseLen() {
                return ((bitField0_ & 0x00000008) == 0x00000008);
            }

            /**
             * <code>required int32 LicenseLen = 4;</code>
             */
            public int getLicenseLen() {
                return licenseLen_;
            }

            /**
             * <code>required int32 LicenseLen = 4;</code>
             */
            public Builder setLicenseLen(int value) {
                bitField0_ |= 0x00000008;
                licenseLen_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required int32 LicenseLen = 4;</code>
             */
            public Builder clearLicenseLen() {
                bitField0_ = (bitField0_ & ~0x00000008);
                licenseLen_ = 0;
                onChanged();
                return this;
            }

            // required int32 Country = 5;
            private int country_;

            /**
             * <code>required int32 Country = 5;</code>
             */
            public boolean hasCountry() {
                return ((bitField0_ & 0x00000010) == 0x00000010);
            }

            /**
             * <code>required int32 Country = 5;</code>
             */
            public int getCountry() {
                return country_;
            }

            /**
             * <code>required int32 Country = 5;</code>
             */
            public Builder setCountry(int value) {
                bitField0_ |= 0x00000010;
                country_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required int32 Country = 5;</code>
             */
            public Builder clearCountry() {
                bitField0_ = (bitField0_ & ~0x00000010);
                country_ = 0;
                onChanged();
                return this;
            }

            // required string License = 6;
            private Object license_ = "";

            /**
             * <code>required string License = 6;</code>
             */
            public boolean hasLicense() {
                return ((bitField0_ & 0x00000020) == 0x00000020);
            }

            /**
             * <code>required string License = 6;</code>
             */
            public String getLicense() {
                Object ref = license_;
                if (!(ref instanceof String)) {
                    String s = ((com.google.protobuf.ByteString) ref)
                            .toStringUtf8();
                    license_ = s;
                    return s;
                } else {
                    return (String) ref;
                }
            }

            /**
             * <code>required string License = 6;</code>
             */
            public com.google.protobuf.ByteString
            getLicenseBytes() {
                Object ref = license_;
                if (ref instanceof String) {
                    com.google.protobuf.ByteString b =
                            com.google.protobuf.ByteString.copyFromUtf8(
                                    (String) ref);
                    license_ = b;
                    return b;
                } else {
                    return (com.google.protobuf.ByteString) ref;
                }
            }

            /**
             * <code>required string License = 6;</code>
             */
            public Builder setLicense(
                    String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000020;
                license_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required string License = 6;</code>
             */
            public Builder clearLicense() {
                bitField0_ = (bitField0_ & ~0x00000020);
                license_ = getDefaultInstance().getLicense();
                onChanged();
                return this;
            }

            /**
             * <code>required string License = 6;</code>
             */
            public Builder setLicenseBytes(
                    com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000020;
                license_ = value;
                onChanged();
                return this;
            }

            // required string Believe = 7;
            private Object believe_ = "";

            /**
             * <code>required string Believe = 7;</code>
             */
            public boolean hasBelieve() {
                return ((bitField0_ & 0x00000040) == 0x00000040);
            }

            /**
             * <code>required string Believe = 7;</code>
             */
            public String getBelieve() {
                Object ref = believe_;
                if (!(ref instanceof String)) {
                    String s = ((com.google.protobuf.ByteString) ref)
                            .toStringUtf8();
                    believe_ = s;
                    return s;
                } else {
                    return (String) ref;
                }
            }

            /**
             * <code>required string Believe = 7;</code>
             */
            public com.google.protobuf.ByteString
            getBelieveBytes() {
                Object ref = believe_;
                if (ref instanceof String) {
                    com.google.protobuf.ByteString b =
                            com.google.protobuf.ByteString.copyFromUtf8(
                                    (String) ref);
                    believe_ = b;
                    return b;
                } else {
                    return (com.google.protobuf.ByteString) ref;
                }
            }

            /**
             * <code>required string Believe = 7;</code>
             */
            public Builder setBelieve(
                    String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000040;
                believe_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required string Believe = 7;</code>
             */
            public Builder clearBelieve() {
                bitField0_ = (bitField0_ & ~0x00000040);
                believe_ = getDefaultInstance().getBelieve();
                onChanged();
                return this;
            }

            /**
             * <code>required string Believe = 7;</code>
             */
            public Builder setBelieveBytes(
                    com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000040;
                believe_ = value;
                onChanged();
                return this;
            }

            // @@protoc_insertion_point(builder_scope:PlateInfoModel)
        }

        static {
            defaultInstance = new PlateInfoModel(true);
            defaultInstance.initFields();
        }

        // @@protoc_insertion_point(class_scope:PlateInfoModel)
    }

    public interface VehicleInfoModelOrBuilder
            extends com.google.protobuf.MessageOrBuilder {

        // required int32 Index = 1;

        /**
         * <code>required int32 Index = 1;</code>
         */
        boolean hasIndex();

        /**
         * <code>required int32 Index = 1;</code>
         */
        int getIndex();

        // required int32 VehicleType = 2;

        /**
         * <code>required int32 VehicleType = 2;</code>
         */
        boolean hasVehicleType();

        /**
         * <code>required int32 VehicleType = 2;</code>
         */
        int getVehicleType();

        // required int32 ColorDepth = 3;

        /**
         * <code>required int32 ColorDepth = 3;</code>
         */
        boolean hasColorDepth();

        /**
         * <code>required int32 ColorDepth = 3;</code>
         */
        int getColorDepth();

        // optional string Color = 4;

        /**
         * <code>optional string Color = 4;</code>
         */
        boolean hasColor();

        /**
         * <code>optional string Color = 4;</code>
         */
        String getColor();

        /**
         * <code>optional string Color = 4;</code>
         */
        com.google.protobuf.ByteString
        getColorBytes();

        // required float Speed = 5;

        /**
         * <code>required float Speed = 5;</code>
         */
        boolean hasSpeed();

        /**
         * <code>required float Speed = 5;</code>
         */
        float getSpeed();

        // required float Length = 6;

        /**
         * <code>required float Length = 6;</code>
         */
        boolean hasLength();

        /**
         * <code>required float Length = 6;</code>
         */
        float getLength();

        // required int32 IllegalType = 7;

        /**
         * <code>required int32 IllegalType = 7;</code>
         */
        boolean hasIllegalType();

        /**
         * <code>required int32 IllegalType = 7;</code>
         */
        int getIllegalType();

        // optional string VehicleLogoRecog = 8;

        /**
         * <code>optional string VehicleLogoRecog = 8;</code>
         */
        boolean hasVehicleLogoRecog();

        /**
         * <code>optional string VehicleLogoRecog = 8;</code>
         */
        String getVehicleLogoRecog();

        /**
         * <code>optional string VehicleLogoRecog = 8;</code>
         */
        com.google.protobuf.ByteString
        getVehicleLogoRecogBytes();

        // optional string VehicleSubLogoRecog = 9;

        /**
         * <code>optional string VehicleSubLogoRecog = 9;</code>
         */
        boolean hasVehicleSubLogoRecog();

        /**
         * <code>optional string VehicleSubLogoRecog = 9;</code>
         */
        String getVehicleSubLogoRecog();

        /**
         * <code>optional string VehicleSubLogoRecog = 9;</code>
         */
        com.google.protobuf.ByteString
        getVehicleSubLogoRecogBytes();

        // optional string VehicleModel = 10;

        /**
         * <code>optional string VehicleModel = 10;</code>
         */
        boolean hasVehicleModel();

        /**
         * <code>optional string VehicleModel = 10;</code>
         */
        String getVehicleModel();

        /**
         * <code>optional string VehicleModel = 10;</code>
         */
        com.google.protobuf.ByteString
        getVehicleModelBytes();
    }

    /**
     * Protobuf type {@code VehicleInfoModel}
     */
    public static final class VehicleInfoModel extends
            com.google.protobuf.GeneratedMessage
            implements VehicleInfoModelOrBuilder {
        // Use VehicleInfoModel.newBuilder() to construct.
        private VehicleInfoModel(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.unknownFields = builder.getUnknownFields();
        }

        private VehicleInfoModel(boolean noInit) {
            this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private static final VehicleInfoModel defaultInstance;

        public static VehicleInfoModel getDefaultInstance() {
            return defaultInstance;
        }

        public VehicleInfoModel getDefaultInstanceForType() {
            return defaultInstance;
        }

        private final com.google.protobuf.UnknownFieldSet unknownFields;

        @Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return this.unknownFields;
        }

        private VehicleInfoModel(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            initFields();
            int mutable_bitField0_ = 0;
            com.google.protobuf.UnknownFieldSet.Builder unknownFields =
                    com.google.protobuf.UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!parseUnknownField(input, unknownFields,
                                    extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 8: {
                            bitField0_ |= 0x00000001;
                            index_ = input.readInt32();
                            break;
                        }
                        case 16: {
                            bitField0_ |= 0x00000002;
                            vehicleType_ = input.readInt32();
                            break;
                        }
                        case 24: {
                            bitField0_ |= 0x00000004;
                            colorDepth_ = input.readInt32();
                            break;
                        }
                        case 34: {
                            bitField0_ |= 0x00000008;
                            color_ = input.readBytes();
                            break;
                        }
                        case 45: {
                            bitField0_ |= 0x00000010;
                            speed_ = input.readFloat();
                            break;
                        }
                        case 53: {
                            bitField0_ |= 0x00000020;
                            length_ = input.readFloat();
                            break;
                        }
                        case 56: {
                            bitField0_ |= 0x00000040;
                            illegalType_ = input.readInt32();
                            break;
                        }
                        case 66: {
                            bitField0_ |= 0x00000080;
                            vehicleLogoRecog_ = input.readBytes();
                            break;
                        }
                        case 74: {
                            bitField0_ |= 0x00000100;
                            vehicleSubLogoRecog_ = input.readBytes();
                            break;
                        }
                        case 82: {
                            bitField0_ |= 0x00000200;
                            vehicleModel_ = input.readBytes();
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e.getMessage()).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return OffenceSnapDataProtos.internal_static_VehicleInfoModel_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return OffenceSnapDataProtos.internal_static_VehicleInfoModel_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            VehicleInfoModel.class, Builder.class);
        }

        public static com.google.protobuf.Parser<VehicleInfoModel> PARSER =
                new com.google.protobuf.AbstractParser<VehicleInfoModel>() {
                    public VehicleInfoModel parsePartialFrom(
                            com.google.protobuf.CodedInputStream input,
                            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                            throws com.google.protobuf.InvalidProtocolBufferException {
                        return new VehicleInfoModel(input, extensionRegistry);
                    }
                };

        @Override
        public com.google.protobuf.Parser<VehicleInfoModel> getParserForType() {
            return PARSER;
        }

        private int bitField0_;
        // required int32 Index = 1;
        public static final int INDEX_FIELD_NUMBER = 1;
        private int index_;

        /**
         * <code>required int32 Index = 1;</code>
         */
        public boolean hasIndex() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }

        /**
         * <code>required int32 Index = 1;</code>
         */
        public int getIndex() {
            return index_;
        }

        // required int32 VehicleType = 2;
        public static final int VEHICLETYPE_FIELD_NUMBER = 2;
        private int vehicleType_;

        /**
         * <code>required int32 VehicleType = 2;</code>
         */
        public boolean hasVehicleType() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
        }

        /**
         * <code>required int32 VehicleType = 2;</code>
         */
        public int getVehicleType() {
            return vehicleType_;
        }

        // required int32 ColorDepth = 3;
        public static final int COLORDEPTH_FIELD_NUMBER = 3;
        private int colorDepth_;

        /**
         * <code>required int32 ColorDepth = 3;</code>
         */
        public boolean hasColorDepth() {
            return ((bitField0_ & 0x00000004) == 0x00000004);
        }

        /**
         * <code>required int32 ColorDepth = 3;</code>
         */
        public int getColorDepth() {
            return colorDepth_;
        }

        // optional string Color = 4;
        public static final int COLOR_FIELD_NUMBER = 4;
        private Object color_;

        /**
         * <code>optional string Color = 4;</code>
         */
        public boolean hasColor() {
            return ((bitField0_ & 0x00000008) == 0x00000008);
        }

        /**
         * <code>optional string Color = 4;</code>
         */
        public String getColor() {
            Object ref = color_;
            if (ref instanceof String) {
                return (String) ref;
            } else {
                com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                String s = bs.toStringUtf8();
                if (bs.isValidUtf8()) {
                    color_ = s;
                }
                return s;
            }
        }

        /**
         * <code>optional string Color = 4;</code>
         */
        public com.google.protobuf.ByteString
        getColorBytes() {
            Object ref = color_;
            if (ref instanceof String) {
                com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8(
                                (String) ref);
                color_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        // required float Speed = 5;
        public static final int SPEED_FIELD_NUMBER = 5;
        private float speed_;

        /**
         * <code>required float Speed = 5;</code>
         */
        public boolean hasSpeed() {
            return ((bitField0_ & 0x00000010) == 0x00000010);
        }

        /**
         * <code>required float Speed = 5;</code>
         */
        public float getSpeed() {
            return speed_;
        }

        // required float Length = 6;
        public static final int LENGTH_FIELD_NUMBER = 6;
        private float length_;

        /**
         * <code>required float Length = 6;</code>
         */
        public boolean hasLength() {
            return ((bitField0_ & 0x00000020) == 0x00000020);
        }

        /**
         * <code>required float Length = 6;</code>
         */
        public float getLength() {
            return length_;
        }

        // required int32 IllegalType = 7;
        public static final int ILLEGALTYPE_FIELD_NUMBER = 7;
        private int illegalType_;

        /**
         * <code>required int32 IllegalType = 7;</code>
         */
        public boolean hasIllegalType() {
            return ((bitField0_ & 0x00000040) == 0x00000040);
        }

        /**
         * <code>required int32 IllegalType = 7;</code>
         */
        public int getIllegalType() {
            return illegalType_;
        }

        // optional string VehicleLogoRecog = 8;
        public static final int VEHICLELOGORECOG_FIELD_NUMBER = 8;
        private Object vehicleLogoRecog_;

        /**
         * <code>optional string VehicleLogoRecog = 8;</code>
         */
        public boolean hasVehicleLogoRecog() {
            return ((bitField0_ & 0x00000080) == 0x00000080);
        }

        /**
         * <code>optional string VehicleLogoRecog = 8;</code>
         */
        public String getVehicleLogoRecog() {
            Object ref = vehicleLogoRecog_;
            if (ref instanceof String) {
                return (String) ref;
            } else {
                com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                String s = bs.toStringUtf8();
                if (bs.isValidUtf8()) {
                    vehicleLogoRecog_ = s;
                }
                return s;
            }
        }

        /**
         * <code>optional string VehicleLogoRecog = 8;</code>
         */
        public com.google.protobuf.ByteString
        getVehicleLogoRecogBytes() {
            Object ref = vehicleLogoRecog_;
            if (ref instanceof String) {
                com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8(
                                (String) ref);
                vehicleLogoRecog_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        // optional string VehicleSubLogoRecog = 9;
        public static final int VEHICLESUBLOGORECOG_FIELD_NUMBER = 9;
        private Object vehicleSubLogoRecog_;

        /**
         * <code>optional string VehicleSubLogoRecog = 9;</code>
         */
        public boolean hasVehicleSubLogoRecog() {
            return ((bitField0_ & 0x00000100) == 0x00000100);
        }

        /**
         * <code>optional string VehicleSubLogoRecog = 9;</code>
         */
        public String getVehicleSubLogoRecog() {
            Object ref = vehicleSubLogoRecog_;
            if (ref instanceof String) {
                return (String) ref;
            } else {
                com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                String s = bs.toStringUtf8();
                if (bs.isValidUtf8()) {
                    vehicleSubLogoRecog_ = s;
                }
                return s;
            }
        }

        /**
         * <code>optional string VehicleSubLogoRecog = 9;</code>
         */
        public com.google.protobuf.ByteString
        getVehicleSubLogoRecogBytes() {
            Object ref = vehicleSubLogoRecog_;
            if (ref instanceof String) {
                com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8(
                                (String) ref);
                vehicleSubLogoRecog_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        // optional string VehicleModel = 10;
        public static final int VEHICLEMODEL_FIELD_NUMBER = 10;
        private Object vehicleModel_;

        /**
         * <code>optional string VehicleModel = 10;</code>
         */
        public boolean hasVehicleModel() {
            return ((bitField0_ & 0x00000200) == 0x00000200);
        }

        /**
         * <code>optional string VehicleModel = 10;</code>
         */
        public String getVehicleModel() {
            Object ref = vehicleModel_;
            if (ref instanceof String) {
                return (String) ref;
            } else {
                com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                String s = bs.toStringUtf8();
                if (bs.isValidUtf8()) {
                    vehicleModel_ = s;
                }
                return s;
            }
        }

        /**
         * <code>optional string VehicleModel = 10;</code>
         */
        public com.google.protobuf.ByteString
        getVehicleModelBytes() {
            Object ref = vehicleModel_;
            if (ref instanceof String) {
                com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8(
                                (String) ref);
                vehicleModel_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        private void initFields() {
            index_ = 0;
            vehicleType_ = 0;
            colorDepth_ = 0;
            color_ = "";
            speed_ = 0F;
            length_ = 0F;
            illegalType_ = 0;
            vehicleLogoRecog_ = "";
            vehicleSubLogoRecog_ = "";
            vehicleModel_ = "";
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized != -1) return isInitialized == 1;

            if (!hasIndex()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasVehicleType()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasColorDepth()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasSpeed()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasLength()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasIllegalType()) {
                memoizedIsInitialized = 0;
                return false;
            }
            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            getSerializedSize();
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                output.writeInt32(1, index_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                output.writeInt32(2, vehicleType_);
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                output.writeInt32(3, colorDepth_);
            }
            if (((bitField0_ & 0x00000008) == 0x00000008)) {
                output.writeBytes(4, getColorBytes());
            }
            if (((bitField0_ & 0x00000010) == 0x00000010)) {
                output.writeFloat(5, speed_);
            }
            if (((bitField0_ & 0x00000020) == 0x00000020)) {
                output.writeFloat(6, length_);
            }
            if (((bitField0_ & 0x00000040) == 0x00000040)) {
                output.writeInt32(7, illegalType_);
            }
            if (((bitField0_ & 0x00000080) == 0x00000080)) {
                output.writeBytes(8, getVehicleLogoRecogBytes());
            }
            if (((bitField0_ & 0x00000100) == 0x00000100)) {
                output.writeBytes(9, getVehicleSubLogoRecogBytes());
            }
            if (((bitField0_ & 0x00000200) == 0x00000200)) {
                output.writeBytes(10, getVehicleModelBytes());
            }
            getUnknownFields().writeTo(output);
        }

        private int memoizedSerializedSize = -1;

        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(1, index_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(2, vehicleType_);
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(3, colorDepth_);
            }
            if (((bitField0_ & 0x00000008) == 0x00000008)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(4, getColorBytes());
            }
            if (((bitField0_ & 0x00000010) == 0x00000010)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeFloatSize(5, speed_);
            }
            if (((bitField0_ & 0x00000020) == 0x00000020)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeFloatSize(6, length_);
            }
            if (((bitField0_ & 0x00000040) == 0x00000040)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(7, illegalType_);
            }
            if (((bitField0_ & 0x00000080) == 0x00000080)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(8, getVehicleLogoRecogBytes());
            }
            if (((bitField0_ & 0x00000100) == 0x00000100)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(9, getVehicleSubLogoRecogBytes());
            }
            if (((bitField0_ & 0x00000200) == 0x00000200)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(10, getVehicleModelBytes());
            }
            size += getUnknownFields().getSerializedSize();
            memoizedSerializedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @Override
        protected Object writeReplace()
                throws java.io.ObjectStreamException {
            return super.writeReplace();
        }

        public static VehicleInfoModel parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static VehicleInfoModel parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static VehicleInfoModel parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static VehicleInfoModel parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static VehicleInfoModel parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static VehicleInfoModel parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static VehicleInfoModel parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input);
        }

        public static VehicleInfoModel parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static VehicleInfoModel parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static VehicleInfoModel parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(VehicleInfoModel prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        @Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * Protobuf type {@code VehicleInfoModel}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessage.Builder<Builder>
                implements VehicleInfoModelOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return OffenceSnapDataProtos.internal_static_VehicleInfoModel_descriptor;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return OffenceSnapDataProtos.internal_static_VehicleInfoModel_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                VehicleInfoModel.class, Builder.class);
            }

            // Construct using com.kmlc.protobuf.OffenceSnapDataProtos.VehicleInfoModel.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
                }
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                index_ = 0;
                bitField0_ = (bitField0_ & ~0x00000001);
                vehicleType_ = 0;
                bitField0_ = (bitField0_ & ~0x00000002);
                colorDepth_ = 0;
                bitField0_ = (bitField0_ & ~0x00000004);
                color_ = "";
                bitField0_ = (bitField0_ & ~0x00000008);
                speed_ = 0F;
                bitField0_ = (bitField0_ & ~0x00000010);
                length_ = 0F;
                bitField0_ = (bitField0_ & ~0x00000020);
                illegalType_ = 0;
                bitField0_ = (bitField0_ & ~0x00000040);
                vehicleLogoRecog_ = "";
                bitField0_ = (bitField0_ & ~0x00000080);
                vehicleSubLogoRecog_ = "";
                bitField0_ = (bitField0_ & ~0x00000100);
                vehicleModel_ = "";
                bitField0_ = (bitField0_ & ~0x00000200);
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return OffenceSnapDataProtos.internal_static_VehicleInfoModel_descriptor;
            }

            public VehicleInfoModel getDefaultInstanceForType() {
                return VehicleInfoModel.getDefaultInstance();
            }

            public VehicleInfoModel build() {
                VehicleInfoModel result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public VehicleInfoModel buildPartial() {
                VehicleInfoModel result = new VehicleInfoModel(this);
                int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
                    to_bitField0_ |= 0x00000001;
                }
                result.index_ = index_;
                if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
                    to_bitField0_ |= 0x00000002;
                }
                result.vehicleType_ = vehicleType_;
                if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
                    to_bitField0_ |= 0x00000004;
                }
                result.colorDepth_ = colorDepth_;
                if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
                    to_bitField0_ |= 0x00000008;
                }
                result.color_ = color_;
                if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
                    to_bitField0_ |= 0x00000010;
                }
                result.speed_ = speed_;
                if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
                    to_bitField0_ |= 0x00000020;
                }
                result.length_ = length_;
                if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
                    to_bitField0_ |= 0x00000040;
                }
                result.illegalType_ = illegalType_;
                if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
                    to_bitField0_ |= 0x00000080;
                }
                result.vehicleLogoRecog_ = vehicleLogoRecog_;
                if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
                    to_bitField0_ |= 0x00000100;
                }
                result.vehicleSubLogoRecog_ = vehicleSubLogoRecog_;
                if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
                    to_bitField0_ |= 0x00000200;
                }
                result.vehicleModel_ = vehicleModel_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof VehicleInfoModel) {
                    return mergeFrom((VehicleInfoModel) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(VehicleInfoModel other) {
                if (other == VehicleInfoModel.getDefaultInstance()) return this;
                if (other.hasIndex()) {
                    setIndex(other.getIndex());
                }
                if (other.hasVehicleType()) {
                    setVehicleType(other.getVehicleType());
                }
                if (other.hasColorDepth()) {
                    setColorDepth(other.getColorDepth());
                }
                if (other.hasColor()) {
                    bitField0_ |= 0x00000008;
                    color_ = other.color_;
                    onChanged();
                }
                if (other.hasSpeed()) {
                    setSpeed(other.getSpeed());
                }
                if (other.hasLength()) {
                    setLength(other.getLength());
                }
                if (other.hasIllegalType()) {
                    setIllegalType(other.getIllegalType());
                }
                if (other.hasVehicleLogoRecog()) {
                    bitField0_ |= 0x00000080;
                    vehicleLogoRecog_ = other.vehicleLogoRecog_;
                    onChanged();
                }
                if (other.hasVehicleSubLogoRecog()) {
                    bitField0_ |= 0x00000100;
                    vehicleSubLogoRecog_ = other.vehicleSubLogoRecog_;
                    onChanged();
                }
                if (other.hasVehicleModel()) {
                    bitField0_ |= 0x00000200;
                    vehicleModel_ = other.vehicleModel_;
                    onChanged();
                }
                this.mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasIndex()) {

                    return false;
                }
                if (!hasVehicleType()) {

                    return false;
                }
                if (!hasColorDepth()) {

                    return false;
                }
                if (!hasSpeed()) {

                    return false;
                }
                if (!hasLength()) {

                    return false;
                }
                if (!hasIllegalType()) {

                    return false;
                }
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                VehicleInfoModel parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (VehicleInfoModel) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private int bitField0_;

            // required int32 Index = 1;
            private int index_;

            /**
             * <code>required int32 Index = 1;</code>
             */
            public boolean hasIndex() {
                return ((bitField0_ & 0x00000001) == 0x00000001);
            }

            /**
             * <code>required int32 Index = 1;</code>
             */
            public int getIndex() {
                return index_;
            }

            /**
             * <code>required int32 Index = 1;</code>
             */
            public Builder setIndex(int value) {
                bitField0_ |= 0x00000001;
                index_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required int32 Index = 1;</code>
             */
            public Builder clearIndex() {
                bitField0_ = (bitField0_ & ~0x00000001);
                index_ = 0;
                onChanged();
                return this;
            }

            // required int32 VehicleType = 2;
            private int vehicleType_;

            /**
             * <code>required int32 VehicleType = 2;</code>
             */
            public boolean hasVehicleType() {
                return ((bitField0_ & 0x00000002) == 0x00000002);
            }

            /**
             * <code>required int32 VehicleType = 2;</code>
             */
            public int getVehicleType() {
                return vehicleType_;
            }

            /**
             * <code>required int32 VehicleType = 2;</code>
             */
            public Builder setVehicleType(int value) {
                bitField0_ |= 0x00000002;
                vehicleType_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required int32 VehicleType = 2;</code>
             */
            public Builder clearVehicleType() {
                bitField0_ = (bitField0_ & ~0x00000002);
                vehicleType_ = 0;
                onChanged();
                return this;
            }

            // required int32 ColorDepth = 3;
            private int colorDepth_;

            /**
             * <code>required int32 ColorDepth = 3;</code>
             */
            public boolean hasColorDepth() {
                return ((bitField0_ & 0x00000004) == 0x00000004);
            }

            /**
             * <code>required int32 ColorDepth = 3;</code>
             */
            public int getColorDepth() {
                return colorDepth_;
            }

            /**
             * <code>required int32 ColorDepth = 3;</code>
             */
            public Builder setColorDepth(int value) {
                bitField0_ |= 0x00000004;
                colorDepth_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required int32 ColorDepth = 3;</code>
             */
            public Builder clearColorDepth() {
                bitField0_ = (bitField0_ & ~0x00000004);
                colorDepth_ = 0;
                onChanged();
                return this;
            }

            // optional string Color = 4;
            private Object color_ = "";

            /**
             * <code>optional string Color = 4;</code>
             */
            public boolean hasColor() {
                return ((bitField0_ & 0x00000008) == 0x00000008);
            }

            /**
             * <code>optional string Color = 4;</code>
             */
            public String getColor() {
                Object ref = color_;
                if (!(ref instanceof String)) {
                    String s = ((com.google.protobuf.ByteString) ref)
                            .toStringUtf8();
                    color_ = s;
                    return s;
                } else {
                    return (String) ref;
                }
            }

            /**
             * <code>optional string Color = 4;</code>
             */
            public com.google.protobuf.ByteString
            getColorBytes() {
                Object ref = color_;
                if (ref instanceof String) {
                    com.google.protobuf.ByteString b =
                            com.google.protobuf.ByteString.copyFromUtf8(
                                    (String) ref);
                    color_ = b;
                    return b;
                } else {
                    return (com.google.protobuf.ByteString) ref;
                }
            }

            /**
             * <code>optional string Color = 4;</code>
             */
            public Builder setColor(
                    String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000008;
                color_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional string Color = 4;</code>
             */
            public Builder clearColor() {
                bitField0_ = (bitField0_ & ~0x00000008);
                color_ = getDefaultInstance().getColor();
                onChanged();
                return this;
            }

            /**
             * <code>optional string Color = 4;</code>
             */
            public Builder setColorBytes(
                    com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000008;
                color_ = value;
                onChanged();
                return this;
            }

            // required float Speed = 5;
            private float speed_;

            /**
             * <code>required float Speed = 5;</code>
             */
            public boolean hasSpeed() {
                return ((bitField0_ & 0x00000010) == 0x00000010);
            }

            /**
             * <code>required float Speed = 5;</code>
             */
            public float getSpeed() {
                return speed_;
            }

            /**
             * <code>required float Speed = 5;</code>
             */
            public Builder setSpeed(float value) {
                bitField0_ |= 0x00000010;
                speed_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required float Speed = 5;</code>
             */
            public Builder clearSpeed() {
                bitField0_ = (bitField0_ & ~0x00000010);
                speed_ = 0F;
                onChanged();
                return this;
            }

            // required float Length = 6;
            private float length_;

            /**
             * <code>required float Length = 6;</code>
             */
            public boolean hasLength() {
                return ((bitField0_ & 0x00000020) == 0x00000020);
            }

            /**
             * <code>required float Length = 6;</code>
             */
            public float getLength() {
                return length_;
            }

            /**
             * <code>required float Length = 6;</code>
             */
            public Builder setLength(float value) {
                bitField0_ |= 0x00000020;
                length_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required float Length = 6;</code>
             */
            public Builder clearLength() {
                bitField0_ = (bitField0_ & ~0x00000020);
                length_ = 0F;
                onChanged();
                return this;
            }

            // required int32 IllegalType = 7;
            private int illegalType_;

            /**
             * <code>required int32 IllegalType = 7;</code>
             */
            public boolean hasIllegalType() {
                return ((bitField0_ & 0x00000040) == 0x00000040);
            }

            /**
             * <code>required int32 IllegalType = 7;</code>
             */
            public int getIllegalType() {
                return illegalType_;
            }

            /**
             * <code>required int32 IllegalType = 7;</code>
             */
            public Builder setIllegalType(int value) {
                bitField0_ |= 0x00000040;
                illegalType_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required int32 IllegalType = 7;</code>
             */
            public Builder clearIllegalType() {
                bitField0_ = (bitField0_ & ~0x00000040);
                illegalType_ = 0;
                onChanged();
                return this;
            }

            // optional string VehicleLogoRecog = 8;
            private Object vehicleLogoRecog_ = "";

            /**
             * <code>optional string VehicleLogoRecog = 8;</code>
             */
            public boolean hasVehicleLogoRecog() {
                return ((bitField0_ & 0x00000080) == 0x00000080);
            }

            /**
             * <code>optional string VehicleLogoRecog = 8;</code>
             */
            public String getVehicleLogoRecog() {
                Object ref = vehicleLogoRecog_;
                if (!(ref instanceof String)) {
                    String s = ((com.google.protobuf.ByteString) ref)
                            .toStringUtf8();
                    vehicleLogoRecog_ = s;
                    return s;
                } else {
                    return (String) ref;
                }
            }

            /**
             * <code>optional string VehicleLogoRecog = 8;</code>
             */
            public com.google.protobuf.ByteString
            getVehicleLogoRecogBytes() {
                Object ref = vehicleLogoRecog_;
                if (ref instanceof String) {
                    com.google.protobuf.ByteString b =
                            com.google.protobuf.ByteString.copyFromUtf8(
                                    (String) ref);
                    vehicleLogoRecog_ = b;
                    return b;
                } else {
                    return (com.google.protobuf.ByteString) ref;
                }
            }

            /**
             * <code>optional string VehicleLogoRecog = 8;</code>
             */
            public Builder setVehicleLogoRecog(
                    String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000080;
                vehicleLogoRecog_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional string VehicleLogoRecog = 8;</code>
             */
            public Builder clearVehicleLogoRecog() {
                bitField0_ = (bitField0_ & ~0x00000080);
                vehicleLogoRecog_ = getDefaultInstance().getVehicleLogoRecog();
                onChanged();
                return this;
            }

            /**
             * <code>optional string VehicleLogoRecog = 8;</code>
             */
            public Builder setVehicleLogoRecogBytes(
                    com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000080;
                vehicleLogoRecog_ = value;
                onChanged();
                return this;
            }

            // optional string VehicleSubLogoRecog = 9;
            private Object vehicleSubLogoRecog_ = "";

            /**
             * <code>optional string VehicleSubLogoRecog = 9;</code>
             */
            public boolean hasVehicleSubLogoRecog() {
                return ((bitField0_ & 0x00000100) == 0x00000100);
            }

            /**
             * <code>optional string VehicleSubLogoRecog = 9;</code>
             */
            public String getVehicleSubLogoRecog() {
                Object ref = vehicleSubLogoRecog_;
                if (!(ref instanceof String)) {
                    String s = ((com.google.protobuf.ByteString) ref)
                            .toStringUtf8();
                    vehicleSubLogoRecog_ = s;
                    return s;
                } else {
                    return (String) ref;
                }
            }

            /**
             * <code>optional string VehicleSubLogoRecog = 9;</code>
             */
            public com.google.protobuf.ByteString
            getVehicleSubLogoRecogBytes() {
                Object ref = vehicleSubLogoRecog_;
                if (ref instanceof String) {
                    com.google.protobuf.ByteString b =
                            com.google.protobuf.ByteString.copyFromUtf8(
                                    (String) ref);
                    vehicleSubLogoRecog_ = b;
                    return b;
                } else {
                    return (com.google.protobuf.ByteString) ref;
                }
            }

            /**
             * <code>optional string VehicleSubLogoRecog = 9;</code>
             */
            public Builder setVehicleSubLogoRecog(
                    String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000100;
                vehicleSubLogoRecog_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional string VehicleSubLogoRecog = 9;</code>
             */
            public Builder clearVehicleSubLogoRecog() {
                bitField0_ = (bitField0_ & ~0x00000100);
                vehicleSubLogoRecog_ = getDefaultInstance().getVehicleSubLogoRecog();
                onChanged();
                return this;
            }

            /**
             * <code>optional string VehicleSubLogoRecog = 9;</code>
             */
            public Builder setVehicleSubLogoRecogBytes(
                    com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000100;
                vehicleSubLogoRecog_ = value;
                onChanged();
                return this;
            }

            // optional string VehicleModel = 10;
            private Object vehicleModel_ = "";

            /**
             * <code>optional string VehicleModel = 10;</code>
             */
            public boolean hasVehicleModel() {
                return ((bitField0_ & 0x00000200) == 0x00000200);
            }

            /**
             * <code>optional string VehicleModel = 10;</code>
             */
            public String getVehicleModel() {
                Object ref = vehicleModel_;
                if (!(ref instanceof String)) {
                    String s = ((com.google.protobuf.ByteString) ref)
                            .toStringUtf8();
                    vehicleModel_ = s;
                    return s;
                } else {
                    return (String) ref;
                }
            }

            /**
             * <code>optional string VehicleModel = 10;</code>
             */
            public com.google.protobuf.ByteString
            getVehicleModelBytes() {
                Object ref = vehicleModel_;
                if (ref instanceof String) {
                    com.google.protobuf.ByteString b =
                            com.google.protobuf.ByteString.copyFromUtf8(
                                    (String) ref);
                    vehicleModel_ = b;
                    return b;
                } else {
                    return (com.google.protobuf.ByteString) ref;
                }
            }

            /**
             * <code>optional string VehicleModel = 10;</code>
             */
            public Builder setVehicleModel(
                    String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000200;
                vehicleModel_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional string VehicleModel = 10;</code>
             */
            public Builder clearVehicleModel() {
                bitField0_ = (bitField0_ & ~0x00000200);
                vehicleModel_ = getDefaultInstance().getVehicleModel();
                onChanged();
                return this;
            }

            /**
             * <code>optional string VehicleModel = 10;</code>
             */
            public Builder setVehicleModelBytes(
                    com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000200;
                vehicleModel_ = value;
                onChanged();
                return this;
            }

            // @@protoc_insertion_point(builder_scope:VehicleInfoModel)
        }

        static {
            defaultInstance = new VehicleInfoModel(true);
            defaultInstance.initFields();
        }

        // @@protoc_insertion_point(class_scope:VehicleInfoModel)
    }

    public interface PlateRectModelOrBuilder
            extends com.google.protobuf.MessageOrBuilder {

        // required int32 X = 1;

        /**
         * <code>required int32 X = 1;</code>
         */
        boolean hasX();

        /**
         * <code>required int32 X = 1;</code>
         */
        int getX();

        // required int32 Y = 2;

        /**
         * <code>required int32 Y = 2;</code>
         */
        boolean hasY();

        /**
         * <code>required int32 Y = 2;</code>
         */
        int getY();

        // required int32 Width = 3;

        /**
         * <code>required int32 Width = 3;</code>
         */
        boolean hasWidth();

        /**
         * <code>required int32 Width = 3;</code>
         */
        int getWidth();

        // required int32 Height = 4;

        /**
         * <code>required int32 Height = 4;</code>
         */
        boolean hasHeight();

        /**
         * <code>required int32 Height = 4;</code>
         */
        int getHeight();
    }

    /**
     * Protobuf type {@code PlateRectModel}
     */
    public static final class PlateRectModel extends
            com.google.protobuf.GeneratedMessage
            implements PlateRectModelOrBuilder {
        // Use PlateRectModel.newBuilder() to construct.
        private PlateRectModel(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.unknownFields = builder.getUnknownFields();
        }

        private PlateRectModel(boolean noInit) {
            this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private static final PlateRectModel defaultInstance;

        public static PlateRectModel getDefaultInstance() {
            return defaultInstance;
        }

        public PlateRectModel getDefaultInstanceForType() {
            return defaultInstance;
        }

        private final com.google.protobuf.UnknownFieldSet unknownFields;

        @Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return this.unknownFields;
        }

        private PlateRectModel(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            initFields();
            int mutable_bitField0_ = 0;
            com.google.protobuf.UnknownFieldSet.Builder unknownFields =
                    com.google.protobuf.UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!parseUnknownField(input, unknownFields,
                                    extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 8: {
                            bitField0_ |= 0x00000001;
                            x_ = input.readInt32();
                            break;
                        }
                        case 16: {
                            bitField0_ |= 0x00000002;
                            y_ = input.readInt32();
                            break;
                        }
                        case 24: {
                            bitField0_ |= 0x00000004;
                            width_ = input.readInt32();
                            break;
                        }
                        case 32: {
                            bitField0_ |= 0x00000008;
                            height_ = input.readInt32();
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e.getMessage()).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return OffenceSnapDataProtos.internal_static_PlateRectModel_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return OffenceSnapDataProtos.internal_static_PlateRectModel_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            PlateRectModel.class, Builder.class);
        }

        public static com.google.protobuf.Parser<PlateRectModel> PARSER =
                new com.google.protobuf.AbstractParser<PlateRectModel>() {
                    public PlateRectModel parsePartialFrom(
                            com.google.protobuf.CodedInputStream input,
                            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                            throws com.google.protobuf.InvalidProtocolBufferException {
                        return new PlateRectModel(input, extensionRegistry);
                    }
                };

        @Override
        public com.google.protobuf.Parser<PlateRectModel> getParserForType() {
            return PARSER;
        }

        private int bitField0_;
        // required int32 X = 1;
        public static final int X_FIELD_NUMBER = 1;
        private int x_;

        /**
         * <code>required int32 X = 1;</code>
         */
        public boolean hasX() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }

        /**
         * <code>required int32 X = 1;</code>
         */
        public int getX() {
            return x_;
        }

        // required int32 Y = 2;
        public static final int Y_FIELD_NUMBER = 2;
        private int y_;

        /**
         * <code>required int32 Y = 2;</code>
         */
        public boolean hasY() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
        }

        /**
         * <code>required int32 Y = 2;</code>
         */
        public int getY() {
            return y_;
        }

        // required int32 Width = 3;
        public static final int WIDTH_FIELD_NUMBER = 3;
        private int width_;

        /**
         * <code>required int32 Width = 3;</code>
         */
        public boolean hasWidth() {
            return ((bitField0_ & 0x00000004) == 0x00000004);
        }

        /**
         * <code>required int32 Width = 3;</code>
         */
        public int getWidth() {
            return width_;
        }

        // required int32 Height = 4;
        public static final int HEIGHT_FIELD_NUMBER = 4;
        private int height_;

        /**
         * <code>required int32 Height = 4;</code>
         */
        public boolean hasHeight() {
            return ((bitField0_ & 0x00000008) == 0x00000008);
        }

        /**
         * <code>required int32 Height = 4;</code>
         */
        public int getHeight() {
            return height_;
        }

        private void initFields() {
            x_ = 0;
            y_ = 0;
            width_ = 0;
            height_ = 0;
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized != -1) return isInitialized == 1;

            if (!hasX()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasY()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasWidth()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasHeight()) {
                memoizedIsInitialized = 0;
                return false;
            }
            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            getSerializedSize();
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                output.writeInt32(1, x_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                output.writeInt32(2, y_);
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                output.writeInt32(3, width_);
            }
            if (((bitField0_ & 0x00000008) == 0x00000008)) {
                output.writeInt32(4, height_);
            }
            getUnknownFields().writeTo(output);
        }

        private int memoizedSerializedSize = -1;

        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(1, x_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(2, y_);
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(3, width_);
            }
            if (((bitField0_ & 0x00000008) == 0x00000008)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(4, height_);
            }
            size += getUnknownFields().getSerializedSize();
            memoizedSerializedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @Override
        protected Object writeReplace()
                throws java.io.ObjectStreamException {
            return super.writeReplace();
        }

        public static PlateRectModel parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static PlateRectModel parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static PlateRectModel parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static PlateRectModel parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static PlateRectModel parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static PlateRectModel parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static PlateRectModel parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input);
        }

        public static PlateRectModel parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static PlateRectModel parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static PlateRectModel parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(PlateRectModel prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        @Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * Protobuf type {@code PlateRectModel}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessage.Builder<Builder>
                implements PlateRectModelOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return OffenceSnapDataProtos.internal_static_PlateRectModel_descriptor;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return OffenceSnapDataProtos.internal_static_PlateRectModel_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                PlateRectModel.class, Builder.class);
            }

            // Construct using com.kmlc.protobuf.OffenceSnapDataProtos.PlateRectModel.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
                }
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                x_ = 0;
                bitField0_ = (bitField0_ & ~0x00000001);
                y_ = 0;
                bitField0_ = (bitField0_ & ~0x00000002);
                width_ = 0;
                bitField0_ = (bitField0_ & ~0x00000004);
                height_ = 0;
                bitField0_ = (bitField0_ & ~0x00000008);
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return OffenceSnapDataProtos.internal_static_PlateRectModel_descriptor;
            }

            public PlateRectModel getDefaultInstanceForType() {
                return PlateRectModel.getDefaultInstance();
            }

            public PlateRectModel build() {
                PlateRectModel result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public PlateRectModel buildPartial() {
                PlateRectModel result = new PlateRectModel(this);
                int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
                    to_bitField0_ |= 0x00000001;
                }
                result.x_ = x_;
                if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
                    to_bitField0_ |= 0x00000002;
                }
                result.y_ = y_;
                if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
                    to_bitField0_ |= 0x00000004;
                }
                result.width_ = width_;
                if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
                    to_bitField0_ |= 0x00000008;
                }
                result.height_ = height_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof PlateRectModel) {
                    return mergeFrom((PlateRectModel) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(PlateRectModel other) {
                if (other == PlateRectModel.getDefaultInstance()) return this;
                if (other.hasX()) {
                    setX(other.getX());
                }
                if (other.hasY()) {
                    setY(other.getY());
                }
                if (other.hasWidth()) {
                    setWidth(other.getWidth());
                }
                if (other.hasHeight()) {
                    setHeight(other.getHeight());
                }
                this.mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasX()) {

                    return false;
                }
                if (!hasY()) {

                    return false;
                }
                if (!hasWidth()) {

                    return false;
                }
                if (!hasHeight()) {

                    return false;
                }
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                PlateRectModel parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (PlateRectModel) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private int bitField0_;

            // required int32 X = 1;
            private int x_;

            /**
             * <code>required int32 X = 1;</code>
             */
            public boolean hasX() {
                return ((bitField0_ & 0x00000001) == 0x00000001);
            }

            /**
             * <code>required int32 X = 1;</code>
             */
            public int getX() {
                return x_;
            }

            /**
             * <code>required int32 X = 1;</code>
             */
            public Builder setX(int value) {
                bitField0_ |= 0x00000001;
                x_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required int32 X = 1;</code>
             */
            public Builder clearX() {
                bitField0_ = (bitField0_ & ~0x00000001);
                x_ = 0;
                onChanged();
                return this;
            }

            // required int32 Y = 2;
            private int y_;

            /**
             * <code>required int32 Y = 2;</code>
             */
            public boolean hasY() {
                return ((bitField0_ & 0x00000002) == 0x00000002);
            }

            /**
             * <code>required int32 Y = 2;</code>
             */
            public int getY() {
                return y_;
            }

            /**
             * <code>required int32 Y = 2;</code>
             */
            public Builder setY(int value) {
                bitField0_ |= 0x00000002;
                y_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required int32 Y = 2;</code>
             */
            public Builder clearY() {
                bitField0_ = (bitField0_ & ~0x00000002);
                y_ = 0;
                onChanged();
                return this;
            }

            // required int32 Width = 3;
            private int width_;

            /**
             * <code>required int32 Width = 3;</code>
             */
            public boolean hasWidth() {
                return ((bitField0_ & 0x00000004) == 0x00000004);
            }

            /**
             * <code>required int32 Width = 3;</code>
             */
            public int getWidth() {
                return width_;
            }

            /**
             * <code>required int32 Width = 3;</code>
             */
            public Builder setWidth(int value) {
                bitField0_ |= 0x00000004;
                width_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required int32 Width = 3;</code>
             */
            public Builder clearWidth() {
                bitField0_ = (bitField0_ & ~0x00000004);
                width_ = 0;
                onChanged();
                return this;
            }

            // required int32 Height = 4;
            private int height_;

            /**
             * <code>required int32 Height = 4;</code>
             */
            public boolean hasHeight() {
                return ((bitField0_ & 0x00000008) == 0x00000008);
            }

            /**
             * <code>required int32 Height = 4;</code>
             */
            public int getHeight() {
                return height_;
            }

            /**
             * <code>required int32 Height = 4;</code>
             */
            public Builder setHeight(int value) {
                bitField0_ |= 0x00000008;
                height_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required int32 Height = 4;</code>
             */
            public Builder clearHeight() {
                bitField0_ = (bitField0_ & ~0x00000008);
                height_ = 0;
                onChanged();
                return this;
            }

            // @@protoc_insertion_point(builder_scope:PlateRectModel)
        }

        static {
            defaultInstance = new PlateRectModel(true);
            defaultInstance.initFields();
        }

        // @@protoc_insertion_point(class_scope:PlateRectModel)
    }

    public interface PicInfoModelOrBuilder
            extends com.google.protobuf.MessageOrBuilder {

        // required int32 Type = 1;

        /**
         * <code>required int32 Type = 1;</code>
         */
        boolean hasType();

        /**
         * <code>required int32 Type = 1;</code>
         */
        int getType();

        // required int32 PicRecogMode = 2;

        /**
         * <code>required int32 PicRecogMode = 2;</code>
         */
        boolean hasPicRecogMode();

        /**
         * <code>required int32 PicRecogMode = 2;</code>
         */
        int getPicRecogMode();

        // required int32 RedLightTime = 3;

        /**
         * <code>required int32 RedLightTime = 3;</code>
         */
        boolean hasRedLightTime();

        /**
         * <code>required int32 RedLightTime = 3;</code>
         */
        int getRedLightTime();

        // required .PlateRectModel PlateRect = 4;

        /**
         * <code>required .PlateRectModel PlateRect = 4;</code>
         */
        boolean hasPlateRect();

        /**
         * <code>required .PlateRectModel PlateRect = 4;</code>
         */
        PlateRectModel getPlateRect();

        /**
         * <code>required .PlateRectModel PlateRect = 4;</code>
         */
        PlateRectModelOrBuilder getPlateRectOrBuilder();

        // required string Data = 5;

        /**
         * <code>required string Data = 5;</code>
         */
        boolean hasData();

        /**
         * <code>required string Data = 5;</code>
         */
        String getData();

        /**
         * <code>required string Data = 5;</code>
         */
        com.google.protobuf.ByteString
        getDataBytes();
    }

    /**
     * Protobuf type {@code PicInfoModel}
     */
    public static final class PicInfoModel extends
            com.google.protobuf.GeneratedMessage
            implements PicInfoModelOrBuilder {
        // Use PicInfoModel.newBuilder() to construct.
        private PicInfoModel(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.unknownFields = builder.getUnknownFields();
        }

        private PicInfoModel(boolean noInit) {
            this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private static final PicInfoModel defaultInstance;

        public static PicInfoModel getDefaultInstance() {
            return defaultInstance;
        }

        public PicInfoModel getDefaultInstanceForType() {
            return defaultInstance;
        }

        private final com.google.protobuf.UnknownFieldSet unknownFields;

        @Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return this.unknownFields;
        }

        private PicInfoModel(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            initFields();
            int mutable_bitField0_ = 0;
            com.google.protobuf.UnknownFieldSet.Builder unknownFields =
                    com.google.protobuf.UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!parseUnknownField(input, unknownFields,
                                    extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 8: {
                            bitField0_ |= 0x00000001;
                            type_ = input.readInt32();
                            break;
                        }
                        case 16: {
                            bitField0_ |= 0x00000002;
                            picRecogMode_ = input.readInt32();
                            break;
                        }
                        case 24: {
                            bitField0_ |= 0x00000004;
                            redLightTime_ = input.readInt32();
                            break;
                        }
                        case 34: {
                            PlateRectModel.Builder subBuilder = null;
                            if (((bitField0_ & 0x00000008) == 0x00000008)) {
                                subBuilder = plateRect_.toBuilder();
                            }
                            plateRect_ = input.readMessage(PlateRectModel.PARSER, extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(plateRect_);
                                plateRect_ = subBuilder.buildPartial();
                            }
                            bitField0_ |= 0x00000008;
                            break;
                        }
                        case 42: {
                            bitField0_ |= 0x00000010;
                            data_ = input.readBytes();
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e.getMessage()).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return OffenceSnapDataProtos.internal_static_PicInfoModel_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return OffenceSnapDataProtos.internal_static_PicInfoModel_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            PicInfoModel.class, Builder.class);
        }

        public static com.google.protobuf.Parser<PicInfoModel> PARSER =
                new com.google.protobuf.AbstractParser<PicInfoModel>() {
                    public PicInfoModel parsePartialFrom(
                            com.google.protobuf.CodedInputStream input,
                            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                            throws com.google.protobuf.InvalidProtocolBufferException {
                        return new PicInfoModel(input, extensionRegistry);
                    }
                };

        @Override
        public com.google.protobuf.Parser<PicInfoModel> getParserForType() {
            return PARSER;
        }

        private int bitField0_;
        // required int32 Type = 1;
        public static final int TYPE_FIELD_NUMBER = 1;
        private int type_;

        /**
         * <code>required int32 Type = 1;</code>
         */
        public boolean hasType() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }

        /**
         * <code>required int32 Type = 1;</code>
         */
        public int getType() {
            return type_;
        }

        // required int32 PicRecogMode = 2;
        public static final int PICRECOGMODE_FIELD_NUMBER = 2;
        private int picRecogMode_;

        /**
         * <code>required int32 PicRecogMode = 2;</code>
         */
        public boolean hasPicRecogMode() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
        }

        /**
         * <code>required int32 PicRecogMode = 2;</code>
         */
        public int getPicRecogMode() {
            return picRecogMode_;
        }

        // required int32 RedLightTime = 3;
        public static final int REDLIGHTTIME_FIELD_NUMBER = 3;
        private int redLightTime_;

        /**
         * <code>required int32 RedLightTime = 3;</code>
         */
        public boolean hasRedLightTime() {
            return ((bitField0_ & 0x00000004) == 0x00000004);
        }

        /**
         * <code>required int32 RedLightTime = 3;</code>
         */
        public int getRedLightTime() {
            return redLightTime_;
        }

        // required .PlateRectModel PlateRect = 4;
        public static final int PLATERECT_FIELD_NUMBER = 4;
        private PlateRectModel plateRect_;

        /**
         * <code>required .PlateRectModel PlateRect = 4;</code>
         */
        public boolean hasPlateRect() {
            return ((bitField0_ & 0x00000008) == 0x00000008);
        }

        /**
         * <code>required .PlateRectModel PlateRect = 4;</code>
         */
        public PlateRectModel getPlateRect() {
            return plateRect_;
        }

        /**
         * <code>required .PlateRectModel PlateRect = 4;</code>
         */
        public PlateRectModelOrBuilder getPlateRectOrBuilder() {
            return plateRect_;
        }

        // required string Data = 5;
        public static final int DATA_FIELD_NUMBER = 5;
        private Object data_;

        /**
         * <code>required string Data = 5;</code>
         */
        public boolean hasData() {
            return ((bitField0_ & 0x00000010) == 0x00000010);
        }

        /**
         * <code>required string Data = 5;</code>
         */
        public String getData() {
            Object ref = data_;
            if (ref instanceof String) {
                return (String) ref;
            } else {
                com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                String s = bs.toStringUtf8();
                if (bs.isValidUtf8()) {
                    data_ = s;
                }
                return s;
            }
        }

        /**
         * <code>required string Data = 5;</code>
         */
        public com.google.protobuf.ByteString
        getDataBytes() {
            Object ref = data_;
            if (ref instanceof String) {
                com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8(
                                (String) ref);
                data_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        private void initFields() {
            type_ = 0;
            picRecogMode_ = 0;
            redLightTime_ = 0;
            plateRect_ = PlateRectModel.getDefaultInstance();
            data_ = "";
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized != -1) return isInitialized == 1;

            if (!hasType()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasPicRecogMode()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasRedLightTime()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasPlateRect()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasData()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!getPlateRect().isInitialized()) {
                memoizedIsInitialized = 0;
                return false;
            }
            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            getSerializedSize();
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                output.writeInt32(1, type_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                output.writeInt32(2, picRecogMode_);
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                output.writeInt32(3, redLightTime_);
            }
            if (((bitField0_ & 0x00000008) == 0x00000008)) {
                output.writeMessage(4, plateRect_);
            }
            if (((bitField0_ & 0x00000010) == 0x00000010)) {
                output.writeBytes(5, getDataBytes());
            }
            getUnknownFields().writeTo(output);
        }

        private int memoizedSerializedSize = -1;

        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(1, type_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(2, picRecogMode_);
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(3, redLightTime_);
            }
            if (((bitField0_ & 0x00000008) == 0x00000008)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(4, plateRect_);
            }
            if (((bitField0_ & 0x00000010) == 0x00000010)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(5, getDataBytes());
            }
            size += getUnknownFields().getSerializedSize();
            memoizedSerializedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @Override
        protected Object writeReplace()
                throws java.io.ObjectStreamException {
            return super.writeReplace();
        }

        public static PicInfoModel parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static PicInfoModel parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static PicInfoModel parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static PicInfoModel parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static PicInfoModel parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static PicInfoModel parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static PicInfoModel parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input);
        }

        public static PicInfoModel parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static PicInfoModel parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static PicInfoModel parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(PicInfoModel prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        @Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * Protobuf type {@code PicInfoModel}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessage.Builder<Builder>
                implements PicInfoModelOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return OffenceSnapDataProtos.internal_static_PicInfoModel_descriptor;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return OffenceSnapDataProtos.internal_static_PicInfoModel_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                PicInfoModel.class, Builder.class);
            }

            // Construct using com.kmlc.protobuf.OffenceSnapDataProtos.PicInfoModel.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
                    getPlateRectFieldBuilder();
                }
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                type_ = 0;
                bitField0_ = (bitField0_ & ~0x00000001);
                picRecogMode_ = 0;
                bitField0_ = (bitField0_ & ~0x00000002);
                redLightTime_ = 0;
                bitField0_ = (bitField0_ & ~0x00000004);
                if (plateRectBuilder_ == null) {
                    plateRect_ = PlateRectModel.getDefaultInstance();
                } else {
                    plateRectBuilder_.clear();
                }
                bitField0_ = (bitField0_ & ~0x00000008);
                data_ = "";
                bitField0_ = (bitField0_ & ~0x00000010);
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return OffenceSnapDataProtos.internal_static_PicInfoModel_descriptor;
            }

            public PicInfoModel getDefaultInstanceForType() {
                return PicInfoModel.getDefaultInstance();
            }

            public PicInfoModel build() {
                PicInfoModel result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public PicInfoModel buildPartial() {
                PicInfoModel result = new PicInfoModel(this);
                int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
                    to_bitField0_ |= 0x00000001;
                }
                result.type_ = type_;
                if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
                    to_bitField0_ |= 0x00000002;
                }
                result.picRecogMode_ = picRecogMode_;
                if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
                    to_bitField0_ |= 0x00000004;
                }
                result.redLightTime_ = redLightTime_;
                if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
                    to_bitField0_ |= 0x00000008;
                }
                if (plateRectBuilder_ == null) {
                    result.plateRect_ = plateRect_;
                } else {
                    result.plateRect_ = plateRectBuilder_.build();
                }
                if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
                    to_bitField0_ |= 0x00000010;
                }
                result.data_ = data_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof PicInfoModel) {
                    return mergeFrom((PicInfoModel) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(PicInfoModel other) {
                if (other == PicInfoModel.getDefaultInstance()) return this;
                if (other.hasType()) {
                    setType(other.getType());
                }
                if (other.hasPicRecogMode()) {
                    setPicRecogMode(other.getPicRecogMode());
                }
                if (other.hasRedLightTime()) {
                    setRedLightTime(other.getRedLightTime());
                }
                if (other.hasPlateRect()) {
                    mergePlateRect(other.getPlateRect());
                }
                if (other.hasData()) {
                    bitField0_ |= 0x00000010;
                    data_ = other.data_;
                    onChanged();
                }
                this.mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasType()) {

                    return false;
                }
                if (!hasPicRecogMode()) {

                    return false;
                }
                if (!hasRedLightTime()) {

                    return false;
                }
                if (!hasPlateRect()) {

                    return false;
                }
                if (!hasData()) {

                    return false;
                }
                if (!getPlateRect().isInitialized()) {

                    return false;
                }
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                PicInfoModel parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (PicInfoModel) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private int bitField0_;

            // required int32 Type = 1;
            private int type_;

            /**
             * <code>required int32 Type = 1;</code>
             */
            public boolean hasType() {
                return ((bitField0_ & 0x00000001) == 0x00000001);
            }

            /**
             * <code>required int32 Type = 1;</code>
             */
            public int getType() {
                return type_;
            }

            /**
             * <code>required int32 Type = 1;</code>
             */
            public Builder setType(int value) {
                bitField0_ |= 0x00000001;
                type_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required int32 Type = 1;</code>
             */
            public Builder clearType() {
                bitField0_ = (bitField0_ & ~0x00000001);
                type_ = 0;
                onChanged();
                return this;
            }

            // required int32 PicRecogMode = 2;
            private int picRecogMode_;

            /**
             * <code>required int32 PicRecogMode = 2;</code>
             */
            public boolean hasPicRecogMode() {
                return ((bitField0_ & 0x00000002) == 0x00000002);
            }

            /**
             * <code>required int32 PicRecogMode = 2;</code>
             */
            public int getPicRecogMode() {
                return picRecogMode_;
            }

            /**
             * <code>required int32 PicRecogMode = 2;</code>
             */
            public Builder setPicRecogMode(int value) {
                bitField0_ |= 0x00000002;
                picRecogMode_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required int32 PicRecogMode = 2;</code>
             */
            public Builder clearPicRecogMode() {
                bitField0_ = (bitField0_ & ~0x00000002);
                picRecogMode_ = 0;
                onChanged();
                return this;
            }

            // required int32 RedLightTime = 3;
            private int redLightTime_;

            /**
             * <code>required int32 RedLightTime = 3;</code>
             */
            public boolean hasRedLightTime() {
                return ((bitField0_ & 0x00000004) == 0x00000004);
            }

            /**
             * <code>required int32 RedLightTime = 3;</code>
             */
            public int getRedLightTime() {
                return redLightTime_;
            }

            /**
             * <code>required int32 RedLightTime = 3;</code>
             */
            public Builder setRedLightTime(int value) {
                bitField0_ |= 0x00000004;
                redLightTime_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required int32 RedLightTime = 3;</code>
             */
            public Builder clearRedLightTime() {
                bitField0_ = (bitField0_ & ~0x00000004);
                redLightTime_ = 0;
                onChanged();
                return this;
            }

            // required .PlateRectModel PlateRect = 4;
            private PlateRectModel plateRect_ = PlateRectModel.getDefaultInstance();
            private com.google.protobuf.SingleFieldBuilder<
                    PlateRectModel, PlateRectModel.Builder, PlateRectModelOrBuilder> plateRectBuilder_;

            /**
             * <code>required .PlateRectModel PlateRect = 4;</code>
             */
            public boolean hasPlateRect() {
                return ((bitField0_ & 0x00000008) == 0x00000008);
            }

            /**
             * <code>required .PlateRectModel PlateRect = 4;</code>
             */
            public PlateRectModel getPlateRect() {
                if (plateRectBuilder_ == null) {
                    return plateRect_;
                } else {
                    return plateRectBuilder_.getMessage();
                }
            }

            /**
             * <code>required .PlateRectModel PlateRect = 4;</code>
             */
            public Builder setPlateRect(PlateRectModel value) {
                if (plateRectBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    plateRect_ = value;
                    onChanged();
                } else {
                    plateRectBuilder_.setMessage(value);
                }
                bitField0_ |= 0x00000008;
                return this;
            }

            /**
             * <code>required .PlateRectModel PlateRect = 4;</code>
             */
            public Builder setPlateRect(
                    PlateRectModel.Builder builderForValue) {
                if (plateRectBuilder_ == null) {
                    plateRect_ = builderForValue.build();
                    onChanged();
                } else {
                    plateRectBuilder_.setMessage(builderForValue.build());
                }
                bitField0_ |= 0x00000008;
                return this;
            }

            /**
             * <code>required .PlateRectModel PlateRect = 4;</code>
             */
            public Builder mergePlateRect(PlateRectModel value) {
                if (plateRectBuilder_ == null) {
                    if (((bitField0_ & 0x00000008) == 0x00000008) &&
                            plateRect_ != PlateRectModel.getDefaultInstance()) {
                        plateRect_ =
                                PlateRectModel.newBuilder(plateRect_).mergeFrom(value).buildPartial();
                    } else {
                        plateRect_ = value;
                    }
                    onChanged();
                } else {
                    plateRectBuilder_.mergeFrom(value);
                }
                bitField0_ |= 0x00000008;
                return this;
            }

            /**
             * <code>required .PlateRectModel PlateRect = 4;</code>
             */
            public Builder clearPlateRect() {
                if (plateRectBuilder_ == null) {
                    plateRect_ = PlateRectModel.getDefaultInstance();
                    onChanged();
                } else {
                    plateRectBuilder_.clear();
                }
                bitField0_ = (bitField0_ & ~0x00000008);
                return this;
            }

            /**
             * <code>required .PlateRectModel PlateRect = 4;</code>
             */
            public PlateRectModel.Builder getPlateRectBuilder() {
                bitField0_ |= 0x00000008;
                onChanged();
                return getPlateRectFieldBuilder().getBuilder();
            }

            /**
             * <code>required .PlateRectModel PlateRect = 4;</code>
             */
            public PlateRectModelOrBuilder getPlateRectOrBuilder() {
                if (plateRectBuilder_ != null) {
                    return plateRectBuilder_.getMessageOrBuilder();
                } else {
                    return plateRect_;
                }
            }

            /**
             * <code>required .PlateRectModel PlateRect = 4;</code>
             */
            private com.google.protobuf.SingleFieldBuilder<
                    PlateRectModel, PlateRectModel.Builder, PlateRectModelOrBuilder>
            getPlateRectFieldBuilder() {
                if (plateRectBuilder_ == null) {
                    plateRectBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                            PlateRectModel, PlateRectModel.Builder, PlateRectModelOrBuilder>(
                            plateRect_,
                            getParentForChildren(),
                            isClean());
                    plateRect_ = null;
                }
                return plateRectBuilder_;
            }

            // required string Data = 5;
            private Object data_ = "";

            /**
             * <code>required string Data = 5;</code>
             */
            public boolean hasData() {
                return ((bitField0_ & 0x00000010) == 0x00000010);
            }

            /**
             * <code>required string Data = 5;</code>
             */
            public String getData() {
                Object ref = data_;
                if (!(ref instanceof String)) {
                    String s = ((com.google.protobuf.ByteString) ref)
                            .toStringUtf8();
                    data_ = s;
                    return s;
                } else {
                    return (String) ref;
                }
            }

            /**
             * <code>required string Data = 5;</code>
             */
            public com.google.protobuf.ByteString
            getDataBytes() {
                Object ref = data_;
                if (ref instanceof String) {
                    com.google.protobuf.ByteString b =
                            com.google.protobuf.ByteString.copyFromUtf8(
                                    (String) ref);
                    data_ = b;
                    return b;
                } else {
                    return (com.google.protobuf.ByteString) ref;
                }
            }

            /**
             * <code>required string Data = 5;</code>
             */
            public Builder setData(
                    String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000010;
                data_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required string Data = 5;</code>
             */
            public Builder clearData() {
                bitField0_ = (bitField0_ & ~0x00000010);
                data_ = getDefaultInstance().getData();
                onChanged();
                return this;
            }

            /**
             * <code>required string Data = 5;</code>
             */
            public Builder setDataBytes(
                    com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000010;
                data_ = value;
                onChanged();
                return this;
            }

            // @@protoc_insertion_point(builder_scope:PicInfoModel)
        }

        static {
            defaultInstance = new PicInfoModel(true);
            defaultInstance.initFields();
        }

        // @@protoc_insertion_point(class_scope:PicInfoModel)
    }

    public interface OffenceSnapDataOrBuilder
            extends com.google.protobuf.MessageOrBuilder {

        // required string Id = 1;

        /**
         * <code>required string Id = 1;</code>
         */
        boolean hasId();

        /**
         * <code>required string Id = 1;</code>
         */
        String getId();

        /**
         * <code>required string Id = 1;</code>
         */
        com.google.protobuf.ByteString
        getIdBytes();

        // required int32 DriveChan = 2;

        /**
         * <code>required int32 DriveChan = 2;</code>
         */
        boolean hasDriveChan();

        /**
         * <code>required int32 DriveChan = 2;</code>
         */
        int getDriveChan();

        // required int32 VehicleType = 3;

        /**
         * <code>required int32 VehicleType = 3;</code>
         */
        boolean hasVehicleType();

        /**
         * <code>required int32 VehicleType = 3;</code>
         */
        int getVehicleType();

        // required int32 VehicleAttribute = 4;

        /**
         * <code>required int32 VehicleAttribute = 4;</code>
         */
        boolean hasVehicleAttribute();

        /**
         * <code>required int32 VehicleAttribute = 4;</code>
         */
        int getVehicleAttribute();

        // required int32 IllegalType = 5;

        /**
         * <code>required int32 IllegalType = 5;</code>
         */
        boolean hasIllegalType();

        /**
         * <code>required int32 IllegalType = 5;</code>
         */
        int getIllegalType();

        // required string IllegalSubType = 6;

        /**
         * <code>required string IllegalSubType = 6;</code>
         */
        boolean hasIllegalSubType();

        /**
         * <code>required string IllegalSubType = 6;</code>
         */
        String getIllegalSubType();

        /**
         * <code>required string IllegalSubType = 6;</code>
         */
        com.google.protobuf.ByteString
        getIllegalSubTypeBytes();

        // required int32 PostPicNo = 7;

        /**
         * <code>required int32 PostPicNo = 7;</code>
         */
        boolean hasPostPicNo();

        /**
         * <code>required int32 PostPicNo = 7;</code>
         */
        int getPostPicNo();

        // required int32 ChanIndex = 8;

        /**
         * <code>required int32 ChanIndex = 8;</code>
         */
        boolean hasChanIndex();

        /**
         * <code>required int32 ChanIndex = 8;</code>
         */
        int getChanIndex();

        // required int32 SpeedLimit = 9;

        /**
         * <code>required int32 SpeedLimit = 9;</code>
         */
        boolean hasSpeedLimit();

        /**
         * <code>required int32 SpeedLimit = 9;</code>
         */
        int getSpeedLimit();

        // required .PlateInfoModel PlateInfo = 10;

        /**
         * <code>required .PlateInfoModel PlateInfo = 10;</code>
         */
        boolean hasPlateInfo();

        /**
         * <code>required .PlateInfoModel PlateInfo = 10;</code>
         */
        PlateInfoModel getPlateInfo();

        /**
         * <code>required .PlateInfoModel PlateInfo = 10;</code>
         */
        PlateInfoModelOrBuilder getPlateInfoOrBuilder();

        // required .VehicleInfoModel VehicleInfo = 11;

        /**
         * <code>required .VehicleInfoModel VehicleInfo = 11;</code>
         */
        boolean hasVehicleInfo();

        /**
         * <code>required .VehicleInfoModel VehicleInfo = 11;</code>
         */
        VehicleInfoModel getVehicleInfo();

        /**
         * <code>required .VehicleInfoModel VehicleInfo = 11;</code>
         */
        VehicleInfoModelOrBuilder getVehicleInfoOrBuilder();

        // required string MonitoringSiteID = 12;

        /**
         * <code>required string MonitoringSiteID = 12;</code>
         */
        boolean hasMonitoringSiteID();

        /**
         * <code>required string MonitoringSiteID = 12;</code>
         */
        String getMonitoringSiteID();

        /**
         * <code>required string MonitoringSiteID = 12;</code>
         */
        com.google.protobuf.ByteString
        getMonitoringSiteIDBytes();

        // required int32 Dir = 13;

        /**
         * <code>required int32 Dir = 13;</code>
         */
        boolean hasDir();

        /**
         * <code>required int32 Dir = 13;</code>
         */
        int getDir();

        // required int32 DetectType = 14;

        /**
         * <code>required int32 DetectType = 14;</code>
         */
        boolean hasDetectType();

        /**
         * <code>required int32 DetectType = 14;</code>
         */
        int getDetectType();

        // required int32 PilotSafebelt = 15;

        /**
         * <code>required int32 PilotSafebelt = 15;</code>
         */
        boolean hasPilotSafebelt();

        /**
         * <code>required int32 PilotSafebelt = 15;</code>
         */
        int getPilotSafebelt();

        // required int32 CopilotSafebelt = 16;

        /**
         * <code>required int32 CopilotSafebelt = 16;</code>
         */
        boolean hasCopilotSafebelt();

        /**
         * <code>required int32 CopilotSafebelt = 16;</code>
         */
        int getCopilotSafebelt();

        // required int32 PilotSubVisor = 17;

        /**
         * <code>required int32 PilotSubVisor = 17;</code>
         */
        boolean hasPilotSubVisor();

        /**
         * <code>required int32 PilotSubVisor = 17;</code>
         */
        int getPilotSubVisor();

        // required int32 CopilotSubVisor = 18;

        /**
         * <code>required int32 CopilotSubVisor = 18;</code>
         */
        boolean hasCopilotSubVisor();

        /**
         * <code>required int32 CopilotSubVisor = 18;</code>
         */
        int getCopilotSubVisor();

        // required int32 PilotCall = 19;

        /**
         * <code>required int32 PilotCall = 19;</code>
         */
        boolean hasPilotCall();

        /**
         * <code>required int32 PilotCall = 19;</code>
         */
        int getPilotCall();

        // required int32 AlarmDataType = 20;

        /**
         * <code>required int32 AlarmDataType = 20;</code>
         */
        boolean hasAlarmDataType();

        /**
         * <code>required int32 AlarmDataType = 20;</code>
         */
        int getAlarmDataType();

        // required string llegalTime = 21;

        /**
         * <code>required string llegalTime = 21;</code>
         */
        boolean hasLlegalTime();

        /**
         * <code>required string llegalTime = 21;</code>
         */
        String getLlegalTime();

        /**
         * <code>required string llegalTime = 21;</code>
         */
        com.google.protobuf.ByteString
        getLlegalTimeBytes();

        // required int32 IllegalTimer = 22;

        /**
         * <code>required int32 IllegalTimer = 22;</code>
         */
        boolean hasIllegalTimer();

        /**
         * <code>required int32 IllegalTimer = 22;</code>
         */
        int getIllegalTimer();

        // required int32 PicNum = 23;

        /**
         * <code>required int32 PicNum = 23;</code>
         */
        boolean hasPicNum();

        /**
         * <code>required int32 PicNum = 23;</code>
         */
        int getPicNum();

        // repeated .PicInfoModel PicInfo = 24;

        /**
         * <code>repeated .PicInfoModel PicInfo = 24;</code>
         */
        java.util.List<PicInfoModel>
        getPicInfoList();

        /**
         * <code>repeated .PicInfoModel PicInfo = 24;</code>
         */
        PicInfoModel getPicInfo(int index);

        /**
         * <code>repeated .PicInfoModel PicInfo = 24;</code>
         */
        int getPicInfoCount();

        /**
         * <code>repeated .PicInfoModel PicInfo = 24;</code>
         */
        java.util.List<? extends PicInfoModelOrBuilder>
        getPicInfoOrBuilderList();

        /**
         * <code>repeated .PicInfoModel PicInfo = 24;</code>
         */
        PicInfoModelOrBuilder getPicInfoOrBuilder(
                int index);

        // optional int32 Validity = 25;

        /**
         * <code>optional int32 Validity = 25;</code>
         */
        boolean hasValidity();

        /**
         * <code>optional int32 Validity = 25;</code>
         */
        int getValidity();

        // optional int32 WaitedLength = 26;

        /**
         * <code>optional int32 WaitedLength = 26;</code>
         */
        boolean hasWaitedLength();

        /**
         * <code>optional int32 WaitedLength = 26;</code>
         */
        int getWaitedLength();
    }

    /**
     * Protobuf type {@code OffenceSnapData}
     */
    public static final class OffenceSnapData extends
            com.google.protobuf.GeneratedMessage
            implements OffenceSnapDataOrBuilder {
        // Use OffenceSnapData.newBuilder() to construct.
        private OffenceSnapData(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.unknownFields = builder.getUnknownFields();
        }

        private OffenceSnapData(boolean noInit) {
            this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private static final OffenceSnapData defaultInstance;

        public static OffenceSnapData getDefaultInstance() {
            return defaultInstance;
        }

        public OffenceSnapData getDefaultInstanceForType() {
            return defaultInstance;
        }

        private final com.google.protobuf.UnknownFieldSet unknownFields;

        @Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return this.unknownFields;
        }

        private OffenceSnapData(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            initFields();
            int mutable_bitField0_ = 0;
            com.google.protobuf.UnknownFieldSet.Builder unknownFields =
                    com.google.protobuf.UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!parseUnknownField(input, unknownFields,
                                    extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 10: {
                            bitField0_ |= 0x00000001;
                            id_ = input.readBytes();
                            break;
                        }
                        case 16: {
                            bitField0_ |= 0x00000002;
                            driveChan_ = input.readInt32();
                            break;
                        }
                        case 24: {
                            bitField0_ |= 0x00000004;
                            vehicleType_ = input.readInt32();
                            break;
                        }
                        case 32: {
                            bitField0_ |= 0x00000008;
                            vehicleAttribute_ = input.readInt32();
                            break;
                        }
                        case 40: {
                            bitField0_ |= 0x00000010;
                            illegalType_ = input.readInt32();
                            break;
                        }
                        case 50: {
                            bitField0_ |= 0x00000020;
                            illegalSubType_ = input.readBytes();
                            break;
                        }
                        case 56: {
                            bitField0_ |= 0x00000040;
                            postPicNo_ = input.readInt32();
                            break;
                        }
                        case 64: {
                            bitField0_ |= 0x00000080;
                            chanIndex_ = input.readInt32();
                            break;
                        }
                        case 72: {
                            bitField0_ |= 0x00000100;
                            speedLimit_ = input.readInt32();
                            break;
                        }
                        case 82: {
                            PlateInfoModel.Builder subBuilder = null;
                            if (((bitField0_ & 0x00000200) == 0x00000200)) {
                                subBuilder = plateInfo_.toBuilder();
                            }
                            plateInfo_ = input.readMessage(PlateInfoModel.PARSER, extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(plateInfo_);
                                plateInfo_ = subBuilder.buildPartial();
                            }
                            bitField0_ |= 0x00000200;
                            break;
                        }
                        case 90: {
                            VehicleInfoModel.Builder subBuilder = null;
                            if (((bitField0_ & 0x00000400) == 0x00000400)) {
                                subBuilder = vehicleInfo_.toBuilder();
                            }
                            vehicleInfo_ = input.readMessage(VehicleInfoModel.PARSER, extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(vehicleInfo_);
                                vehicleInfo_ = subBuilder.buildPartial();
                            }
                            bitField0_ |= 0x00000400;
                            break;
                        }
                        case 98: {
                            bitField0_ |= 0x00000800;
                            monitoringSiteID_ = input.readBytes();
                            break;
                        }
                        case 104: {
                            bitField0_ |= 0x00001000;
                            dir_ = input.readInt32();
                            break;
                        }
                        case 112: {
                            bitField0_ |= 0x00002000;
                            detectType_ = input.readInt32();
                            break;
                        }
                        case 120: {
                            bitField0_ |= 0x00004000;
                            pilotSafebelt_ = input.readInt32();
                            break;
                        }
                        case 128: {
                            bitField0_ |= 0x00008000;
                            copilotSafebelt_ = input.readInt32();
                            break;
                        }
                        case 136: {
                            bitField0_ |= 0x00010000;
                            pilotSubVisor_ = input.readInt32();
                            break;
                        }
                        case 144: {
                            bitField0_ |= 0x00020000;
                            copilotSubVisor_ = input.readInt32();
                            break;
                        }
                        case 152: {
                            bitField0_ |= 0x00040000;
                            pilotCall_ = input.readInt32();
                            break;
                        }
                        case 160: {
                            bitField0_ |= 0x00080000;
                            alarmDataType_ = input.readInt32();
                            break;
                        }
                        case 170: {
                            bitField0_ |= 0x00100000;
                            llegalTime_ = input.readBytes();
                            break;
                        }
                        case 176: {
                            bitField0_ |= 0x00200000;
                            illegalTimer_ = input.readInt32();
                            break;
                        }
                        case 184: {
                            bitField0_ |= 0x00400000;
                            picNum_ = input.readInt32();
                            break;
                        }
                        case 194: {
                            if (!((mutable_bitField0_ & 0x00800000) == 0x00800000)) {
                                picInfo_ = new java.util.ArrayList<PicInfoModel>();
                                mutable_bitField0_ |= 0x00800000;
                            }
                            picInfo_.add(input.readMessage(PicInfoModel.PARSER, extensionRegistry));
                            break;
                        }
                        case 200: {
                            bitField0_ |= 0x00800000;
                            validity_ = input.readInt32();
                            break;
                        }
                        case 208: {
                            bitField0_ |= 0x01000000;
                            waitedLength_ = input.readInt32();
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e.getMessage()).setUnfinishedMessage(this);
            } finally {
                if (((mutable_bitField0_ & 0x00800000) == 0x00800000)) {
                    picInfo_ = java.util.Collections.unmodifiableList(picInfo_);
                }
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return OffenceSnapDataProtos.internal_static_OffenceSnapData_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return OffenceSnapDataProtos.internal_static_OffenceSnapData_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            OffenceSnapData.class, Builder.class);
        }

        public static com.google.protobuf.Parser<OffenceSnapData> PARSER =
                new com.google.protobuf.AbstractParser<OffenceSnapData>() {
                    public OffenceSnapData parsePartialFrom(
                            com.google.protobuf.CodedInputStream input,
                            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                            throws com.google.protobuf.InvalidProtocolBufferException {
                        return new OffenceSnapData(input, extensionRegistry);
                    }
                };

        @Override
        public com.google.protobuf.Parser<OffenceSnapData> getParserForType() {
            return PARSER;
        }

        private int bitField0_;
        // required string Id = 1;
        public static final int ID_FIELD_NUMBER = 1;
        private Object id_;

        /**
         * <code>required string Id = 1;</code>
         */
        public boolean hasId() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }

        /**
         * <code>required string Id = 1;</code>
         */
        public String getId() {
            Object ref = id_;
            if (ref instanceof String) {
                return (String) ref;
            } else {
                com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                String s = bs.toStringUtf8();
                if (bs.isValidUtf8()) {
                    id_ = s;
                }
                return s;
            }
        }

        /**
         * <code>required string Id = 1;</code>
         */
        public com.google.protobuf.ByteString
        getIdBytes() {
            Object ref = id_;
            if (ref instanceof String) {
                com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8(
                                (String) ref);
                id_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        // required int32 DriveChan = 2;
        public static final int DRIVECHAN_FIELD_NUMBER = 2;
        private int driveChan_;

        /**
         * <code>required int32 DriveChan = 2;</code>
         */
        public boolean hasDriveChan() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
        }

        /**
         * <code>required int32 DriveChan = 2;</code>
         */
        public int getDriveChan() {
            return driveChan_;
        }

        // required int32 VehicleType = 3;
        public static final int VEHICLETYPE_FIELD_NUMBER = 3;
        private int vehicleType_;

        /**
         * <code>required int32 VehicleType = 3;</code>
         */
        public boolean hasVehicleType() {
            return ((bitField0_ & 0x00000004) == 0x00000004);
        }

        /**
         * <code>required int32 VehicleType = 3;</code>
         */
        public int getVehicleType() {
            return vehicleType_;
        }

        // required int32 VehicleAttribute = 4;
        public static final int VEHICLEATTRIBUTE_FIELD_NUMBER = 4;
        private int vehicleAttribute_;

        /**
         * <code>required int32 VehicleAttribute = 4;</code>
         */
        public boolean hasVehicleAttribute() {
            return ((bitField0_ & 0x00000008) == 0x00000008);
        }

        /**
         * <code>required int32 VehicleAttribute = 4;</code>
         */
        public int getVehicleAttribute() {
            return vehicleAttribute_;
        }

        // required int32 IllegalType = 5;
        public static final int ILLEGALTYPE_FIELD_NUMBER = 5;
        private int illegalType_;

        /**
         * <code>required int32 IllegalType = 5;</code>
         */
        public boolean hasIllegalType() {
            return ((bitField0_ & 0x00000010) == 0x00000010);
        }

        /**
         * <code>required int32 IllegalType = 5;</code>
         */
        public int getIllegalType() {
            return illegalType_;
        }

        // required string IllegalSubType = 6;
        public static final int ILLEGALSUBTYPE_FIELD_NUMBER = 6;
        private Object illegalSubType_;

        /**
         * <code>required string IllegalSubType = 6;</code>
         */
        public boolean hasIllegalSubType() {
            return ((bitField0_ & 0x00000020) == 0x00000020);
        }

        /**
         * <code>required string IllegalSubType = 6;</code>
         */
        public String getIllegalSubType() {
            Object ref = illegalSubType_;
            if (ref instanceof String) {
                return (String) ref;
            } else {
                com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                String s = bs.toStringUtf8();
                if (bs.isValidUtf8()) {
                    illegalSubType_ = s;
                }
                return s;
            }
        }

        /**
         * <code>required string IllegalSubType = 6;</code>
         */
        public com.google.protobuf.ByteString
        getIllegalSubTypeBytes() {
            Object ref = illegalSubType_;
            if (ref instanceof String) {
                com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8(
                                (String) ref);
                illegalSubType_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        // required int32 PostPicNo = 7;
        public static final int POSTPICNO_FIELD_NUMBER = 7;
        private int postPicNo_;

        /**
         * <code>required int32 PostPicNo = 7;</code>
         */
        public boolean hasPostPicNo() {
            return ((bitField0_ & 0x00000040) == 0x00000040);
        }

        /**
         * <code>required int32 PostPicNo = 7;</code>
         */
        public int getPostPicNo() {
            return postPicNo_;
        }

        // required int32 ChanIndex = 8;
        public static final int CHANINDEX_FIELD_NUMBER = 8;
        private int chanIndex_;

        /**
         * <code>required int32 ChanIndex = 8;</code>
         */
        public boolean hasChanIndex() {
            return ((bitField0_ & 0x00000080) == 0x00000080);
        }

        /**
         * <code>required int32 ChanIndex = 8;</code>
         */
        public int getChanIndex() {
            return chanIndex_;
        }

        // required int32 SpeedLimit = 9;
        public static final int SPEEDLIMIT_FIELD_NUMBER = 9;
        private int speedLimit_;

        /**
         * <code>required int32 SpeedLimit = 9;</code>
         */
        public boolean hasSpeedLimit() {
            return ((bitField0_ & 0x00000100) == 0x00000100);
        }

        /**
         * <code>required int32 SpeedLimit = 9;</code>
         */
        public int getSpeedLimit() {
            return speedLimit_;
        }

        // required .PlateInfoModel PlateInfo = 10;
        public static final int PLATEINFO_FIELD_NUMBER = 10;
        private PlateInfoModel plateInfo_;

        /**
         * <code>required .PlateInfoModel PlateInfo = 10;</code>
         */
        public boolean hasPlateInfo() {
            return ((bitField0_ & 0x00000200) == 0x00000200);
        }

        /**
         * <code>required .PlateInfoModel PlateInfo = 10;</code>
         */
        public PlateInfoModel getPlateInfo() {
            return plateInfo_;
        }

        /**
         * <code>required .PlateInfoModel PlateInfo = 10;</code>
         */
        public PlateInfoModelOrBuilder getPlateInfoOrBuilder() {
            return plateInfo_;
        }

        // required .VehicleInfoModel VehicleInfo = 11;
        public static final int VEHICLEINFO_FIELD_NUMBER = 11;
        private VehicleInfoModel vehicleInfo_;

        /**
         * <code>required .VehicleInfoModel VehicleInfo = 11;</code>
         */
        public boolean hasVehicleInfo() {
            return ((bitField0_ & 0x00000400) == 0x00000400);
        }

        /**
         * <code>required .VehicleInfoModel VehicleInfo = 11;</code>
         */
        public VehicleInfoModel getVehicleInfo() {
            return vehicleInfo_;
        }

        /**
         * <code>required .VehicleInfoModel VehicleInfo = 11;</code>
         */
        public VehicleInfoModelOrBuilder getVehicleInfoOrBuilder() {
            return vehicleInfo_;
        }

        // required string MonitoringSiteID = 12;
        public static final int MONITORINGSITEID_FIELD_NUMBER = 12;
        private Object monitoringSiteID_;

        /**
         * <code>required string MonitoringSiteID = 12;</code>
         */
        public boolean hasMonitoringSiteID() {
            return ((bitField0_ & 0x00000800) == 0x00000800);
        }

        /**
         * <code>required string MonitoringSiteID = 12;</code>
         */
        public String getMonitoringSiteID() {
            Object ref = monitoringSiteID_;
            if (ref instanceof String) {
                return (String) ref;
            } else {
                com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                String s = bs.toStringUtf8();
                if (bs.isValidUtf8()) {
                    monitoringSiteID_ = s;
                }
                return s;
            }
        }

        /**
         * <code>required string MonitoringSiteID = 12;</code>
         */
        public com.google.protobuf.ByteString
        getMonitoringSiteIDBytes() {
            Object ref = monitoringSiteID_;
            if (ref instanceof String) {
                com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8(
                                (String) ref);
                monitoringSiteID_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        // required int32 Dir = 13;
        public static final int DIR_FIELD_NUMBER = 13;
        private int dir_;

        /**
         * <code>required int32 Dir = 13;</code>
         */
        public boolean hasDir() {
            return ((bitField0_ & 0x00001000) == 0x00001000);
        }

        /**
         * <code>required int32 Dir = 13;</code>
         */
        public int getDir() {
            return dir_;
        }

        // required int32 DetectType = 14;
        public static final int DETECTTYPE_FIELD_NUMBER = 14;
        private int detectType_;

        /**
         * <code>required int32 DetectType = 14;</code>
         */
        public boolean hasDetectType() {
            return ((bitField0_ & 0x00002000) == 0x00002000);
        }

        /**
         * <code>required int32 DetectType = 14;</code>
         */
        public int getDetectType() {
            return detectType_;
        }

        // required int32 PilotSafebelt = 15;
        public static final int PILOTSAFEBELT_FIELD_NUMBER = 15;
        private int pilotSafebelt_;

        /**
         * <code>required int32 PilotSafebelt = 15;</code>
         */
        public boolean hasPilotSafebelt() {
            return ((bitField0_ & 0x00004000) == 0x00004000);
        }

        /**
         * <code>required int32 PilotSafebelt = 15;</code>
         */
        public int getPilotSafebelt() {
            return pilotSafebelt_;
        }

        // required int32 CopilotSafebelt = 16;
        public static final int COPILOTSAFEBELT_FIELD_NUMBER = 16;
        private int copilotSafebelt_;

        /**
         * <code>required int32 CopilotSafebelt = 16;</code>
         */
        public boolean hasCopilotSafebelt() {
            return ((bitField0_ & 0x00008000) == 0x00008000);
        }

        /**
         * <code>required int32 CopilotSafebelt = 16;</code>
         */
        public int getCopilotSafebelt() {
            return copilotSafebelt_;
        }

        // required int32 PilotSubVisor = 17;
        public static final int PILOTSUBVISOR_FIELD_NUMBER = 17;
        private int pilotSubVisor_;

        /**
         * <code>required int32 PilotSubVisor = 17;</code>
         */
        public boolean hasPilotSubVisor() {
            return ((bitField0_ & 0x00010000) == 0x00010000);
        }

        /**
         * <code>required int32 PilotSubVisor = 17;</code>
         */
        public int getPilotSubVisor() {
            return pilotSubVisor_;
        }

        // required int32 CopilotSubVisor = 18;
        public static final int COPILOTSUBVISOR_FIELD_NUMBER = 18;
        private int copilotSubVisor_;

        /**
         * <code>required int32 CopilotSubVisor = 18;</code>
         */
        public boolean hasCopilotSubVisor() {
            return ((bitField0_ & 0x00020000) == 0x00020000);
        }

        /**
         * <code>required int32 CopilotSubVisor = 18;</code>
         */
        public int getCopilotSubVisor() {
            return copilotSubVisor_;
        }

        // required int32 PilotCall = 19;
        public static final int PILOTCALL_FIELD_NUMBER = 19;
        private int pilotCall_;

        /**
         * <code>required int32 PilotCall = 19;</code>
         */
        public boolean hasPilotCall() {
            return ((bitField0_ & 0x00040000) == 0x00040000);
        }

        /**
         * <code>required int32 PilotCall = 19;</code>
         */
        public int getPilotCall() {
            return pilotCall_;
        }

        // required int32 AlarmDataType = 20;
        public static final int ALARMDATATYPE_FIELD_NUMBER = 20;
        private int alarmDataType_;

        /**
         * <code>required int32 AlarmDataType = 20;</code>
         */
        public boolean hasAlarmDataType() {
            return ((bitField0_ & 0x00080000) == 0x00080000);
        }

        /**
         * <code>required int32 AlarmDataType = 20;</code>
         */
        public int getAlarmDataType() {
            return alarmDataType_;
        }

        // required string llegalTime = 21;
        public static final int LLEGALTIME_FIELD_NUMBER = 21;
        private Object llegalTime_;

        /**
         * <code>required string llegalTime = 21;</code>
         */
        public boolean hasLlegalTime() {
            return ((bitField0_ & 0x00100000) == 0x00100000);
        }

        /**
         * <code>required string llegalTime = 21;</code>
         */
        public String getLlegalTime() {
            Object ref = llegalTime_;
            if (ref instanceof String) {
                return (String) ref;
            } else {
                com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                String s = bs.toStringUtf8();
                if (bs.isValidUtf8()) {
                    llegalTime_ = s;
                }
                return s;
            }
        }

        /**
         * <code>required string llegalTime = 21;</code>
         */
        public com.google.protobuf.ByteString
        getLlegalTimeBytes() {
            Object ref = llegalTime_;
            if (ref instanceof String) {
                com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8(
                                (String) ref);
                llegalTime_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        // required int32 IllegalTimer = 22;
        public static final int ILLEGALTIMER_FIELD_NUMBER = 22;
        private int illegalTimer_;

        /**
         * <code>required int32 IllegalTimer = 22;</code>
         */
        public boolean hasIllegalTimer() {
            return ((bitField0_ & 0x00200000) == 0x00200000);
        }

        /**
         * <code>required int32 IllegalTimer = 22;</code>
         */
        public int getIllegalTimer() {
            return illegalTimer_;
        }

        // required int32 PicNum = 23;
        public static final int PICNUM_FIELD_NUMBER = 23;
        private int picNum_;

        /**
         * <code>required int32 PicNum = 23;</code>
         */
        public boolean hasPicNum() {
            return ((bitField0_ & 0x00400000) == 0x00400000);
        }

        /**
         * <code>required int32 PicNum = 23;</code>
         */
        public int getPicNum() {
            return picNum_;
        }

        // repeated .PicInfoModel PicInfo = 24;
        public static final int PICINFO_FIELD_NUMBER = 24;
        private java.util.List<PicInfoModel> picInfo_;

        /**
         * <code>repeated .PicInfoModel PicInfo = 24;</code>
         */
        public java.util.List<PicInfoModel> getPicInfoList() {
            return picInfo_;
        }

        /**
         * <code>repeated .PicInfoModel PicInfo = 24;</code>
         */
        public java.util.List<? extends PicInfoModelOrBuilder>
        getPicInfoOrBuilderList() {
            return picInfo_;
        }

        /**
         * <code>repeated .PicInfoModel PicInfo = 24;</code>
         */
        public int getPicInfoCount() {
            return picInfo_.size();
        }

        /**
         * <code>repeated .PicInfoModel PicInfo = 24;</code>
         */
        public PicInfoModel getPicInfo(int index) {
            return picInfo_.get(index);
        }

        /**
         * <code>repeated .PicInfoModel PicInfo = 24;</code>
         */
        public PicInfoModelOrBuilder getPicInfoOrBuilder(
                int index) {
            return picInfo_.get(index);
        }

        // optional int32 Validity = 25;
        public static final int VALIDITY_FIELD_NUMBER = 25;
        private int validity_;

        /**
         * <code>optional int32 Validity = 25;</code>
         */
        public boolean hasValidity() {
            return ((bitField0_ & 0x00800000) == 0x00800000);
        }

        /**
         * <code>optional int32 Validity = 25;</code>
         */
        public int getValidity() {
            return validity_;
        }

        // optional int32 WaitedLength = 26;
        public static final int WAITEDLENGTH_FIELD_NUMBER = 26;
        private int waitedLength_;

        /**
         * <code>optional int32 WaitedLength = 26;</code>
         */
        public boolean hasWaitedLength() {
            return ((bitField0_ & 0x01000000) == 0x01000000);
        }

        /**
         * <code>optional int32 WaitedLength = 26;</code>
         */
        public int getWaitedLength() {
            return waitedLength_;
        }

        private void initFields() {
            id_ = "";
            driveChan_ = 0;
            vehicleType_ = 0;
            vehicleAttribute_ = 0;
            illegalType_ = 0;
            illegalSubType_ = "";
            postPicNo_ = 0;
            chanIndex_ = 0;
            speedLimit_ = 0;
            plateInfo_ = PlateInfoModel.getDefaultInstance();
            vehicleInfo_ = VehicleInfoModel.getDefaultInstance();
            monitoringSiteID_ = "";
            dir_ = 0;
            detectType_ = 0;
            pilotSafebelt_ = 0;
            copilotSafebelt_ = 0;
            pilotSubVisor_ = 0;
            copilotSubVisor_ = 0;
            pilotCall_ = 0;
            alarmDataType_ = 0;
            llegalTime_ = "";
            illegalTimer_ = 0;
            picNum_ = 0;
            picInfo_ = java.util.Collections.emptyList();
            validity_ = 0;
            waitedLength_ = 0;
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized != -1) return isInitialized == 1;

            if (!hasId()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasDriveChan()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasVehicleType()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasVehicleAttribute()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasIllegalType()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasIllegalSubType()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasPostPicNo()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasChanIndex()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasSpeedLimit()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasPlateInfo()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasVehicleInfo()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasMonitoringSiteID()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasDir()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasDetectType()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasPilotSafebelt()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasCopilotSafebelt()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasPilotSubVisor()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasCopilotSubVisor()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasPilotCall()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasAlarmDataType()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasLlegalTime()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasIllegalTimer()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasPicNum()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!getPlateInfo().isInitialized()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!getVehicleInfo().isInitialized()) {
                memoizedIsInitialized = 0;
                return false;
            }
            for (int i = 0; i < getPicInfoCount(); i++) {
                if (!getPicInfo(i).isInitialized()) {
                    memoizedIsInitialized = 0;
                    return false;
                }
            }
            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            getSerializedSize();
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                output.writeBytes(1, getIdBytes());
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                output.writeInt32(2, driveChan_);
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                output.writeInt32(3, vehicleType_);
            }
            if (((bitField0_ & 0x00000008) == 0x00000008)) {
                output.writeInt32(4, vehicleAttribute_);
            }
            if (((bitField0_ & 0x00000010) == 0x00000010)) {
                output.writeInt32(5, illegalType_);
            }
            if (((bitField0_ & 0x00000020) == 0x00000020)) {
                output.writeBytes(6, getIllegalSubTypeBytes());
            }
            if (((bitField0_ & 0x00000040) == 0x00000040)) {
                output.writeInt32(7, postPicNo_);
            }
            if (((bitField0_ & 0x00000080) == 0x00000080)) {
                output.writeInt32(8, chanIndex_);
            }
            if (((bitField0_ & 0x00000100) == 0x00000100)) {
                output.writeInt32(9, speedLimit_);
            }
            if (((bitField0_ & 0x00000200) == 0x00000200)) {
                output.writeMessage(10, plateInfo_);
            }
            if (((bitField0_ & 0x00000400) == 0x00000400)) {
                output.writeMessage(11, vehicleInfo_);
            }
            if (((bitField0_ & 0x00000800) == 0x00000800)) {
                output.writeBytes(12, getMonitoringSiteIDBytes());
            }
            if (((bitField0_ & 0x00001000) == 0x00001000)) {
                output.writeInt32(13, dir_);
            }
            if (((bitField0_ & 0x00002000) == 0x00002000)) {
                output.writeInt32(14, detectType_);
            }
            if (((bitField0_ & 0x00004000) == 0x00004000)) {
                output.writeInt32(15, pilotSafebelt_);
            }
            if (((bitField0_ & 0x00008000) == 0x00008000)) {
                output.writeInt32(16, copilotSafebelt_);
            }
            if (((bitField0_ & 0x00010000) == 0x00010000)) {
                output.writeInt32(17, pilotSubVisor_);
            }
            if (((bitField0_ & 0x00020000) == 0x00020000)) {
                output.writeInt32(18, copilotSubVisor_);
            }
            if (((bitField0_ & 0x00040000) == 0x00040000)) {
                output.writeInt32(19, pilotCall_);
            }
            if (((bitField0_ & 0x00080000) == 0x00080000)) {
                output.writeInt32(20, alarmDataType_);
            }
            if (((bitField0_ & 0x00100000) == 0x00100000)) {
                output.writeBytes(21, getLlegalTimeBytes());
            }
            if (((bitField0_ & 0x00200000) == 0x00200000)) {
                output.writeInt32(22, illegalTimer_);
            }
            if (((bitField0_ & 0x00400000) == 0x00400000)) {
                output.writeInt32(23, picNum_);
            }
            for (int i = 0; i < picInfo_.size(); i++) {
                output.writeMessage(24, picInfo_.get(i));
            }
            if (((bitField0_ & 0x00800000) == 0x00800000)) {
                output.writeInt32(25, validity_);
            }
            if (((bitField0_ & 0x01000000) == 0x01000000)) {
                output.writeInt32(26, waitedLength_);
            }
            getUnknownFields().writeTo(output);
        }

        private int memoizedSerializedSize = -1;

        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(1, getIdBytes());
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(2, driveChan_);
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(3, vehicleType_);
            }
            if (((bitField0_ & 0x00000008) == 0x00000008)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(4, vehicleAttribute_);
            }
            if (((bitField0_ & 0x00000010) == 0x00000010)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(5, illegalType_);
            }
            if (((bitField0_ & 0x00000020) == 0x00000020)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(6, getIllegalSubTypeBytes());
            }
            if (((bitField0_ & 0x00000040) == 0x00000040)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(7, postPicNo_);
            }
            if (((bitField0_ & 0x00000080) == 0x00000080)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(8, chanIndex_);
            }
            if (((bitField0_ & 0x00000100) == 0x00000100)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(9, speedLimit_);
            }
            if (((bitField0_ & 0x00000200) == 0x00000200)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(10, plateInfo_);
            }
            if (((bitField0_ & 0x00000400) == 0x00000400)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(11, vehicleInfo_);
            }
            if (((bitField0_ & 0x00000800) == 0x00000800)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(12, getMonitoringSiteIDBytes());
            }
            if (((bitField0_ & 0x00001000) == 0x00001000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(13, dir_);
            }
            if (((bitField0_ & 0x00002000) == 0x00002000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(14, detectType_);
            }
            if (((bitField0_ & 0x00004000) == 0x00004000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(15, pilotSafebelt_);
            }
            if (((bitField0_ & 0x00008000) == 0x00008000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(16, copilotSafebelt_);
            }
            if (((bitField0_ & 0x00010000) == 0x00010000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(17, pilotSubVisor_);
            }
            if (((bitField0_ & 0x00020000) == 0x00020000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(18, copilotSubVisor_);
            }
            if (((bitField0_ & 0x00040000) == 0x00040000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(19, pilotCall_);
            }
            if (((bitField0_ & 0x00080000) == 0x00080000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(20, alarmDataType_);
            }
            if (((bitField0_ & 0x00100000) == 0x00100000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(21, getLlegalTimeBytes());
            }
            if (((bitField0_ & 0x00200000) == 0x00200000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(22, illegalTimer_);
            }
            if (((bitField0_ & 0x00400000) == 0x00400000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(23, picNum_);
            }


            for (int i = 0; i < picInfo_.size(); i++) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(24, picInfo_.get(i));
            }
            if (((bitField0_ & 0x00800000) == 0x00800000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(25, validity_);
            }
            if (((bitField0_ & 0x01000000) == 0x01000000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(26, waitedLength_);
            }
            size += getUnknownFields().getSerializedSize();
            memoizedSerializedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @Override
        protected Object writeReplace()
                throws java.io.ObjectStreamException {
            return super.writeReplace();
        }

        public static OffenceSnapData parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static OffenceSnapData parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static OffenceSnapData parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static OffenceSnapData parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static OffenceSnapData parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static OffenceSnapData parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static OffenceSnapData parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input);
        }

        public static OffenceSnapData parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static OffenceSnapData parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static OffenceSnapData parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(OffenceSnapData prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        @Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * Protobuf type {@code OffenceSnapData}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessage.Builder<Builder>
                implements OffenceSnapDataOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return OffenceSnapDataProtos.internal_static_OffenceSnapData_descriptor;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return OffenceSnapDataProtos.internal_static_OffenceSnapData_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                OffenceSnapData.class, Builder.class);
            }

            // Construct using com.kmlc.protobuf.OffenceSnapDataProtos.OffenceSnapData.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
                    getPlateInfoFieldBuilder();
                    getVehicleInfoFieldBuilder();
                    getPicInfoFieldBuilder();
                }
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                id_ = "";
                bitField0_ = (bitField0_ & ~0x00000001);
                driveChan_ = 0;
                bitField0_ = (bitField0_ & ~0x00000002);
                vehicleType_ = 0;
                bitField0_ = (bitField0_ & ~0x00000004);
                vehicleAttribute_ = 0;
                bitField0_ = (bitField0_ & ~0x00000008);
                illegalType_ = 0;
                bitField0_ = (bitField0_ & ~0x00000010);
                illegalSubType_ = "";
                bitField0_ = (bitField0_ & ~0x00000020);
                postPicNo_ = 0;
                bitField0_ = (bitField0_ & ~0x00000040);
                chanIndex_ = 0;
                bitField0_ = (bitField0_ & ~0x00000080);
                speedLimit_ = 0;
                bitField0_ = (bitField0_ & ~0x00000100);
                if (plateInfoBuilder_ == null) {
                    plateInfo_ = PlateInfoModel.getDefaultInstance();
                } else {
                    plateInfoBuilder_.clear();
                }
                bitField0_ = (bitField0_ & ~0x00000200);
                if (vehicleInfoBuilder_ == null) {
                    vehicleInfo_ = VehicleInfoModel.getDefaultInstance();
                } else {
                    vehicleInfoBuilder_.clear();
                }
                bitField0_ = (bitField0_ & ~0x00000400);
                monitoringSiteID_ = "";
                bitField0_ = (bitField0_ & ~0x00000800);
                dir_ = 0;
                bitField0_ = (bitField0_ & ~0x00001000);
                detectType_ = 0;
                bitField0_ = (bitField0_ & ~0x00002000);
                pilotSafebelt_ = 0;
                bitField0_ = (bitField0_ & ~0x00004000);
                copilotSafebelt_ = 0;
                bitField0_ = (bitField0_ & ~0x00008000);
                pilotSubVisor_ = 0;
                bitField0_ = (bitField0_ & ~0x00010000);
                copilotSubVisor_ = 0;
                bitField0_ = (bitField0_ & ~0x00020000);
                pilotCall_ = 0;
                bitField0_ = (bitField0_ & ~0x00040000);
                alarmDataType_ = 0;
                bitField0_ = (bitField0_ & ~0x00080000);
                llegalTime_ = "";
                bitField0_ = (bitField0_ & ~0x00100000);
                illegalTimer_ = 0;
                bitField0_ = (bitField0_ & ~0x00200000);
                picNum_ = 0;
                bitField0_ = (bitField0_ & ~0x00400000);
                if (picInfoBuilder_ == null) {
                    picInfo_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00800000);
                } else {
                    picInfoBuilder_.clear();
                }
                validity_ = 0;
                bitField0_ = (bitField0_ & ~0x01000000);
                waitedLength_ = 0;
                bitField0_ = (bitField0_ & ~0x02000000);
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return OffenceSnapDataProtos.internal_static_OffenceSnapData_descriptor;
            }

            public OffenceSnapData getDefaultInstanceForType() {
                return OffenceSnapData.getDefaultInstance();
            }

            public OffenceSnapData build() {
                OffenceSnapData result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public OffenceSnapData buildPartial() {
                OffenceSnapData result = new OffenceSnapData(this);
                int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
                    to_bitField0_ |= 0x00000001;
                }
                result.id_ = id_;
                if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
                    to_bitField0_ |= 0x00000002;
                }
                result.driveChan_ = driveChan_;
                if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
                    to_bitField0_ |= 0x00000004;
                }
                result.vehicleType_ = vehicleType_;
                if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
                    to_bitField0_ |= 0x00000008;
                }
                result.vehicleAttribute_ = vehicleAttribute_;
                if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
                    to_bitField0_ |= 0x00000010;
                }
                result.illegalType_ = illegalType_;
                if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
                    to_bitField0_ |= 0x00000020;
                }
                result.illegalSubType_ = illegalSubType_;
                if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
                    to_bitField0_ |= 0x00000040;
                }
                result.postPicNo_ = postPicNo_;
                if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
                    to_bitField0_ |= 0x00000080;
                }
                result.chanIndex_ = chanIndex_;
                if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
                    to_bitField0_ |= 0x00000100;
                }
                result.speedLimit_ = speedLimit_;
                if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
                    to_bitField0_ |= 0x00000200;
                }
                if (plateInfoBuilder_ == null) {
                    result.plateInfo_ = plateInfo_;
                } else {
                    result.plateInfo_ = plateInfoBuilder_.build();
                }
                if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
                    to_bitField0_ |= 0x00000400;
                }
                if (vehicleInfoBuilder_ == null) {
                    result.vehicleInfo_ = vehicleInfo_;
                } else {
                    result.vehicleInfo_ = vehicleInfoBuilder_.build();
                }
                if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
                    to_bitField0_ |= 0x00000800;
                }
                result.monitoringSiteID_ = monitoringSiteID_;
                if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
                    to_bitField0_ |= 0x00001000;
                }
                result.dir_ = dir_;
                if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
                    to_bitField0_ |= 0x00002000;
                }
                result.detectType_ = detectType_;
                if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
                    to_bitField0_ |= 0x00004000;
                }
                result.pilotSafebelt_ = pilotSafebelt_;
                if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
                    to_bitField0_ |= 0x00008000;
                }
                result.copilotSafebelt_ = copilotSafebelt_;
                if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
                    to_bitField0_ |= 0x00010000;
                }
                result.pilotSubVisor_ = pilotSubVisor_;
                if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
                    to_bitField0_ |= 0x00020000;
                }
                result.copilotSubVisor_ = copilotSubVisor_;
                if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
                    to_bitField0_ |= 0x00040000;
                }
                result.pilotCall_ = pilotCall_;
                if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
                    to_bitField0_ |= 0x00080000;
                }
                result.alarmDataType_ = alarmDataType_;
                if (((from_bitField0_ & 0x00100000) == 0x00100000)) {
                    to_bitField0_ |= 0x00100000;
                }
                result.llegalTime_ = llegalTime_;
                if (((from_bitField0_ & 0x00200000) == 0x00200000)) {
                    to_bitField0_ |= 0x00200000;
                }
                result.illegalTimer_ = illegalTimer_;
                if (((from_bitField0_ & 0x00400000) == 0x00400000)) {
                    to_bitField0_ |= 0x00400000;
                }
                result.picNum_ = picNum_;
                if (picInfoBuilder_ == null) {
                    if (((bitField0_ & 0x00800000) == 0x00800000)) {
                        picInfo_ = java.util.Collections.unmodifiableList(picInfo_);
                        bitField0_ = (bitField0_ & ~0x00800000);
                    }
                    result.picInfo_ = picInfo_;
                } else {
                    result.picInfo_ = picInfoBuilder_.build();
                }
                if (((from_bitField0_ & 0x01000000) == 0x01000000)) {
                    to_bitField0_ |= 0x00800000;
                }
                result.validity_ = validity_;
                if (((from_bitField0_ & 0x02000000) == 0x02000000)) {
                    to_bitField0_ |= 0x01000000;
                }
                result.waitedLength_ = waitedLength_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof OffenceSnapData) {
                    return mergeFrom((OffenceSnapData) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(OffenceSnapData other) {
                if (other == OffenceSnapData.getDefaultInstance()) return this;
                if (other.hasId()) {
                    bitField0_ |= 0x00000001;
                    id_ = other.id_;
                    onChanged();
                }
                if (other.hasDriveChan()) {
                    setDriveChan(other.getDriveChan());
                }
                if (other.hasVehicleType()) {
                    setVehicleType(other.getVehicleType());
                }
                if (other.hasVehicleAttribute()) {
                    setVehicleAttribute(other.getVehicleAttribute());
                }
                if (other.hasIllegalType()) {
                    setIllegalType(other.getIllegalType());
                }
                if (other.hasIllegalSubType()) {
                    bitField0_ |= 0x00000020;
                    illegalSubType_ = other.illegalSubType_;
                    onChanged();
                }
                if (other.hasPostPicNo()) {
                    setPostPicNo(other.getPostPicNo());
                }
                if (other.hasChanIndex()) {
                    setChanIndex(other.getChanIndex());
                }
                if (other.hasSpeedLimit()) {
                    setSpeedLimit(other.getSpeedLimit());
                }
                if (other.hasPlateInfo()) {
                    mergePlateInfo(other.getPlateInfo());
                }
                if (other.hasVehicleInfo()) {
                    mergeVehicleInfo(other.getVehicleInfo());
                }
                if (other.hasMonitoringSiteID()) {
                    bitField0_ |= 0x00000800;
                    monitoringSiteID_ = other.monitoringSiteID_;
                    onChanged();
                }
                if (other.hasDir()) {
                    setDir(other.getDir());
                }
                if (other.hasDetectType()) {
                    setDetectType(other.getDetectType());
                }
                if (other.hasPilotSafebelt()) {
                    setPilotSafebelt(other.getPilotSafebelt());
                }
                if (other.hasCopilotSafebelt()) {
                    setCopilotSafebelt(other.getCopilotSafebelt());
                }
                if (other.hasPilotSubVisor()) {
                    setPilotSubVisor(other.getPilotSubVisor());
                }
                if (other.hasCopilotSubVisor()) {
                    setCopilotSubVisor(other.getCopilotSubVisor());
                }
                if (other.hasPilotCall()) {
                    setPilotCall(other.getPilotCall());
                }
                if (other.hasAlarmDataType()) {
                    setAlarmDataType(other.getAlarmDataType());
                }
                if (other.hasLlegalTime()) {
                    bitField0_ |= 0x00100000;
                    llegalTime_ = other.llegalTime_;
                    onChanged();
                }
                if (other.hasIllegalTimer()) {
                    setIllegalTimer(other.getIllegalTimer());
                }
                if (other.hasPicNum()) {
                    setPicNum(other.getPicNum());
                }
                if (picInfoBuilder_ == null) {
                    if (!other.picInfo_.isEmpty()) {
                        if (picInfo_.isEmpty()) {
                            picInfo_ = other.picInfo_;
                            bitField0_ = (bitField0_ & ~0x00800000);
                        } else {
                            ensurePicInfoIsMutable();
                            picInfo_.addAll(other.picInfo_);
                        }
                        onChanged();
                    }
                } else {
                    if (!other.picInfo_.isEmpty()) {
                        if (picInfoBuilder_.isEmpty()) {
                            picInfoBuilder_.dispose();
                            picInfoBuilder_ = null;
                            picInfo_ = other.picInfo_;
                            bitField0_ = (bitField0_ & ~0x00800000);
                            picInfoBuilder_ =
                                    com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                                            getPicInfoFieldBuilder() : null;
                        } else {
                            picInfoBuilder_.addAllMessages(other.picInfo_);
                        }
                    }
                }
                if (other.hasValidity()) {
                    setValidity(other.getValidity());
                }
                if (other.hasWaitedLength()) {
                    setWaitedLength(other.getWaitedLength());
                }
                this.mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasId()) {

                    return false;
                }
                if (!hasDriveChan()) {

                    return false;
                }
                if (!hasVehicleType()) {

                    return false;
                }
                if (!hasVehicleAttribute()) {

                    return false;
                }
                if (!hasIllegalType()) {

                    return false;
                }
                if (!hasIllegalSubType()) {

                    return false;
                }
                if (!hasPostPicNo()) {

                    return false;
                }
                if (!hasChanIndex()) {

                    return false;
                }
                if (!hasSpeedLimit()) {

                    return false;
                }
                if (!hasPlateInfo()) {

                    return false;
                }
                if (!hasVehicleInfo()) {

                    return false;
                }
                if (!hasMonitoringSiteID()) {

                    return false;
                }
                if (!hasDir()) {

                    return false;
                }
                if (!hasDetectType()) {

                    return false;
                }
                if (!hasPilotSafebelt()) {

                    return false;
                }
                if (!hasCopilotSafebelt()) {

                    return false;
                }
                if (!hasPilotSubVisor()) {

                    return false;
                }
                if (!hasCopilotSubVisor()) {

                    return false;
                }
                if (!hasPilotCall()) {

                    return false;
                }
                if (!hasAlarmDataType()) {

                    return false;
                }
                if (!hasLlegalTime()) {

                    return false;
                }
                if (!hasIllegalTimer()) {

                    return false;
                }
                if (!hasPicNum()) {

                    return false;
                }
                if (!getPlateInfo().isInitialized()) {

                    return false;
                }
                if (!getVehicleInfo().isInitialized()) {

                    return false;
                }
                for (int i = 0; i < getPicInfoCount(); i++) {
                    if (!getPicInfo(i).isInitialized()) {

                        return false;
                    }
                }
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                OffenceSnapData parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (OffenceSnapData) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private int bitField0_;

            // required string Id = 1;
            private Object id_ = "";

            /**
             * <code>required string Id = 1;</code>
             */
            public boolean hasId() {
                return ((bitField0_ & 0x00000001) == 0x00000001);
            }

            /**
             * <code>required string Id = 1;</code>
             */
            public String getId() {
                Object ref = id_;
                if (!(ref instanceof String)) {
                    String s = ((com.google.protobuf.ByteString) ref)
                            .toStringUtf8();
                    id_ = s;
                    return s;
                } else {
                    return (String) ref;
                }
            }

            /**
             * <code>required string Id = 1;</code>
             */
            public com.google.protobuf.ByteString
            getIdBytes() {
                Object ref = id_;
                if (ref instanceof String) {
                    com.google.protobuf.ByteString b =
                            com.google.protobuf.ByteString.copyFromUtf8(
                                    (String) ref);
                    id_ = b;
                    return b;
                } else {
                    return (com.google.protobuf.ByteString) ref;
                }
            }

            /**
             * <code>required string Id = 1;</code>
             */
            public Builder setId(
                    String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000001;
                id_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required string Id = 1;</code>
             */
            public Builder clearId() {
                bitField0_ = (bitField0_ & ~0x00000001);
                id_ = getDefaultInstance().getId();
                onChanged();
                return this;
            }

            /**
             * <code>required string Id = 1;</code>
             */
            public Builder setIdBytes(
                    com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000001;
                id_ = value;
                onChanged();
                return this;
            }

            // required int32 DriveChan = 2;
            private int driveChan_;

            /**
             * <code>required int32 DriveChan = 2;</code>
             */
            public boolean hasDriveChan() {
                return ((bitField0_ & 0x00000002) == 0x00000002);
            }

            /**
             * <code>required int32 DriveChan = 2;</code>
             */
            public int getDriveChan() {
                return driveChan_;
            }

            /**
             * <code>required int32 DriveChan = 2;</code>
             */
            public Builder setDriveChan(int value) {
                bitField0_ |= 0x00000002;
                driveChan_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required int32 DriveChan = 2;</code>
             */
            public Builder clearDriveChan() {
                bitField0_ = (bitField0_ & ~0x00000002);
                driveChan_ = 0;
                onChanged();
                return this;
            }

            // required int32 VehicleType = 3;
            private int vehicleType_;

            /**
             * <code>required int32 VehicleType = 3;</code>
             */
            public boolean hasVehicleType() {
                return ((bitField0_ & 0x00000004) == 0x00000004);
            }

            /**
             * <code>required int32 VehicleType = 3;</code>
             */
            public int getVehicleType() {
                return vehicleType_;
            }

            /**
             * <code>required int32 VehicleType = 3;</code>
             */
            public Builder setVehicleType(int value) {
                bitField0_ |= 0x00000004;
                vehicleType_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required int32 VehicleType = 3;</code>
             */
            public Builder clearVehicleType() {
                bitField0_ = (bitField0_ & ~0x00000004);
                vehicleType_ = 0;
                onChanged();
                return this;
            }

            // required int32 VehicleAttribute = 4;
            private int vehicleAttribute_;

            /**
             * <code>required int32 VehicleAttribute = 4;</code>
             */
            public boolean hasVehicleAttribute() {
                return ((bitField0_ & 0x00000008) == 0x00000008);
            }

            /**
             * <code>required int32 VehicleAttribute = 4;</code>
             */
            public int getVehicleAttribute() {
                return vehicleAttribute_;
            }

            /**
             * <code>required int32 VehicleAttribute = 4;</code>
             */
            public Builder setVehicleAttribute(int value) {
                bitField0_ |= 0x00000008;
                vehicleAttribute_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required int32 VehicleAttribute = 4;</code>
             */
            public Builder clearVehicleAttribute() {
                bitField0_ = (bitField0_ & ~0x00000008);
                vehicleAttribute_ = 0;
                onChanged();
                return this;
            }

            // required int32 IllegalType = 5;
            private int illegalType_;

            /**
             * <code>required int32 IllegalType = 5;</code>
             */
            public boolean hasIllegalType() {
                return ((bitField0_ & 0x00000010) == 0x00000010);
            }

            /**
             * <code>required int32 IllegalType = 5;</code>
             */
            public int getIllegalType() {
                return illegalType_;
            }

            /**
             * <code>required int32 IllegalType = 5;</code>
             */
            public Builder setIllegalType(int value) {
                bitField0_ |= 0x00000010;
                illegalType_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required int32 IllegalType = 5;</code>
             */
            public Builder clearIllegalType() {
                bitField0_ = (bitField0_ & ~0x00000010);
                illegalType_ = 0;
                onChanged();
                return this;
            }

            // required string IllegalSubType = 6;
            private Object illegalSubType_ = "";

            /**
             * <code>required string IllegalSubType = 6;</code>
             */
            public boolean hasIllegalSubType() {
                return ((bitField0_ & 0x00000020) == 0x00000020);
            }

            /**
             * <code>required string IllegalSubType = 6;</code>
             */
            public String getIllegalSubType() {
                Object ref = illegalSubType_;
                if (!(ref instanceof String)) {
                    String s = ((com.google.protobuf.ByteString) ref)
                            .toStringUtf8();
                    illegalSubType_ = s;
                    return s;
                } else {
                    return (String) ref;
                }
            }

            /**
             * <code>required string IllegalSubType = 6;</code>
             */
            public com.google.protobuf.ByteString
            getIllegalSubTypeBytes() {
                Object ref = illegalSubType_;
                if (ref instanceof String) {
                    com.google.protobuf.ByteString b =
                            com.google.protobuf.ByteString.copyFromUtf8(
                                    (String) ref);
                    illegalSubType_ = b;
                    return b;
                } else {
                    return (com.google.protobuf.ByteString) ref;
                }
            }

            /**
             * <code>required string IllegalSubType = 6;</code>
             */
            public Builder setIllegalSubType(
                    String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000020;
                illegalSubType_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required string IllegalSubType = 6;</code>
             */
            public Builder clearIllegalSubType() {
                bitField0_ = (bitField0_ & ~0x00000020);
                illegalSubType_ = getDefaultInstance().getIllegalSubType();
                onChanged();
                return this;
            }

            /**
             * <code>required string IllegalSubType = 6;</code>
             */
            public Builder setIllegalSubTypeBytes(
                    com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000020;
                illegalSubType_ = value;
                onChanged();
                return this;
            }

            // required int32 PostPicNo = 7;
            private int postPicNo_;

            /**
             * <code>required int32 PostPicNo = 7;</code>
             */
            public boolean hasPostPicNo() {
                return ((bitField0_ & 0x00000040) == 0x00000040);
            }

            /**
             * <code>required int32 PostPicNo = 7;</code>
             */
            public int getPostPicNo() {
                return postPicNo_;
            }

            /**
             * <code>required int32 PostPicNo = 7;</code>
             */
            public Builder setPostPicNo(int value) {
                bitField0_ |= 0x00000040;
                postPicNo_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required int32 PostPicNo = 7;</code>
             */
            public Builder clearPostPicNo() {
                bitField0_ = (bitField0_ & ~0x00000040);
                postPicNo_ = 0;
                onChanged();
                return this;
            }

            // required int32 ChanIndex = 8;
            private int chanIndex_;

            /**
             * <code>required int32 ChanIndex = 8;</code>
             */
            public boolean hasChanIndex() {
                return ((bitField0_ & 0x00000080) == 0x00000080);
            }

            /**
             * <code>required int32 ChanIndex = 8;</code>
             */
            public int getChanIndex() {
                return chanIndex_;
            }

            /**
             * <code>required int32 ChanIndex = 8;</code>
             */
            public Builder setChanIndex(int value) {
                bitField0_ |= 0x00000080;
                chanIndex_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required int32 ChanIndex = 8;</code>
             */
            public Builder clearChanIndex() {
                bitField0_ = (bitField0_ & ~0x00000080);
                chanIndex_ = 0;
                onChanged();
                return this;
            }

            // required int32 SpeedLimit = 9;
            private int speedLimit_;

            /**
             * <code>required int32 SpeedLimit = 9;</code>
             */
            public boolean hasSpeedLimit() {
                return ((bitField0_ & 0x00000100) == 0x00000100);
            }

            /**
             * <code>required int32 SpeedLimit = 9;</code>
             */
            public int getSpeedLimit() {
                return speedLimit_;
            }

            /**
             * <code>required int32 SpeedLimit = 9;</code>
             */
            public Builder setSpeedLimit(int value) {
                bitField0_ |= 0x00000100;
                speedLimit_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required int32 SpeedLimit = 9;</code>
             */
            public Builder clearSpeedLimit() {
                bitField0_ = (bitField0_ & ~0x00000100);
                speedLimit_ = 0;
                onChanged();
                return this;
            }

            // required .PlateInfoModel PlateInfo = 10;
            private PlateInfoModel plateInfo_ = PlateInfoModel.getDefaultInstance();
            private com.google.protobuf.SingleFieldBuilder<
                    PlateInfoModel, PlateInfoModel.Builder, PlateInfoModelOrBuilder> plateInfoBuilder_;

            /**
             * <code>required .PlateInfoModel PlateInfo = 10;</code>
             */
            public boolean hasPlateInfo() {
                return ((bitField0_ & 0x00000200) == 0x00000200);
            }

            /**
             * <code>required .PlateInfoModel PlateInfo = 10;</code>
             */
            public PlateInfoModel getPlateInfo() {
                if (plateInfoBuilder_ == null) {
                    return plateInfo_;
                } else {
                    return plateInfoBuilder_.getMessage();
                }
            }

            /**
             * <code>required .PlateInfoModel PlateInfo = 10;</code>
             */
            public Builder setPlateInfo(PlateInfoModel value) {
                if (plateInfoBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    plateInfo_ = value;
                    onChanged();
                } else {
                    plateInfoBuilder_.setMessage(value);
                }
                bitField0_ |= 0x00000200;
                return this;
            }

            /**
             * <code>required .PlateInfoModel PlateInfo = 10;</code>
             */
            public Builder setPlateInfo(
                    PlateInfoModel.Builder builderForValue) {
                if (plateInfoBuilder_ == null) {
                    plateInfo_ = builderForValue.build();
                    onChanged();
                } else {
                    plateInfoBuilder_.setMessage(builderForValue.build());
                }
                bitField0_ |= 0x00000200;
                return this;
            }

            /**
             * <code>required .PlateInfoModel PlateInfo = 10;</code>
             */
            public Builder mergePlateInfo(PlateInfoModel value) {
                if (plateInfoBuilder_ == null) {
                    if (((bitField0_ & 0x00000200) == 0x00000200) &&
                            plateInfo_ != PlateInfoModel.getDefaultInstance()) {
                        plateInfo_ =
                                PlateInfoModel.newBuilder(plateInfo_).mergeFrom(value).buildPartial();
                    } else {
                        plateInfo_ = value;
                    }
                    onChanged();
                } else {
                    plateInfoBuilder_.mergeFrom(value);
                }
                bitField0_ |= 0x00000200;
                return this;
            }

            /**
             * <code>required .PlateInfoModel PlateInfo = 10;</code>
             */
            public Builder clearPlateInfo() {
                if (plateInfoBuilder_ == null) {
                    plateInfo_ = PlateInfoModel.getDefaultInstance();
                    onChanged();
                } else {
                    plateInfoBuilder_.clear();
                }
                bitField0_ = (bitField0_ & ~0x00000200);
                return this;
            }

            /**
             * <code>required .PlateInfoModel PlateInfo = 10;</code>
             */
            public PlateInfoModel.Builder getPlateInfoBuilder() {
                bitField0_ |= 0x00000200;
                onChanged();
                return getPlateInfoFieldBuilder().getBuilder();
            }

            /**
             * <code>required .PlateInfoModel PlateInfo = 10;</code>
             */
            public PlateInfoModelOrBuilder getPlateInfoOrBuilder() {
                if (plateInfoBuilder_ != null) {
                    return plateInfoBuilder_.getMessageOrBuilder();
                } else {
                    return plateInfo_;
                }
            }

            /**
             * <code>required .PlateInfoModel PlateInfo = 10;</code>
             */
            private com.google.protobuf.SingleFieldBuilder<
                    PlateInfoModel, PlateInfoModel.Builder, PlateInfoModelOrBuilder>
            getPlateInfoFieldBuilder() {
                if (plateInfoBuilder_ == null) {
                    plateInfoBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                            PlateInfoModel, PlateInfoModel.Builder, PlateInfoModelOrBuilder>(
                            plateInfo_,
                            getParentForChildren(),
                            isClean());
                    plateInfo_ = null;
                }
                return plateInfoBuilder_;
            }

            // required .VehicleInfoModel VehicleInfo = 11;
            private VehicleInfoModel vehicleInfo_ = VehicleInfoModel.getDefaultInstance();
            private com.google.protobuf.SingleFieldBuilder<
                    VehicleInfoModel, VehicleInfoModel.Builder, VehicleInfoModelOrBuilder> vehicleInfoBuilder_;

            /**
             * <code>required .VehicleInfoModel VehicleInfo = 11;</code>
             */
            public boolean hasVehicleInfo() {
                return ((bitField0_ & 0x00000400) == 0x00000400);
            }

            /**
             * <code>required .VehicleInfoModel VehicleInfo = 11;</code>
             */
            public VehicleInfoModel getVehicleInfo() {
                if (vehicleInfoBuilder_ == null) {
                    return vehicleInfo_;
                } else {
                    return vehicleInfoBuilder_.getMessage();
                }
            }

            /**
             * <code>required .VehicleInfoModel VehicleInfo = 11;</code>
             */
            public Builder setVehicleInfo(VehicleInfoModel value) {
                if (vehicleInfoBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    vehicleInfo_ = value;
                    onChanged();
                } else {
                    vehicleInfoBuilder_.setMessage(value);
                }
                bitField0_ |= 0x00000400;
                return this;
            }

            /**
             * <code>required .VehicleInfoModel VehicleInfo = 11;</code>
             */
            public Builder setVehicleInfo(
                    VehicleInfoModel.Builder builderForValue) {
                if (vehicleInfoBuilder_ == null) {
                    vehicleInfo_ = builderForValue.build();
                    onChanged();
                } else {
                    vehicleInfoBuilder_.setMessage(builderForValue.build());
                }
                bitField0_ |= 0x00000400;
                return this;
            }

            /**
             * <code>required .VehicleInfoModel VehicleInfo = 11;</code>
             */
            public Builder mergeVehicleInfo(VehicleInfoModel value) {
                if (vehicleInfoBuilder_ == null) {
                    if (((bitField0_ & 0x00000400) == 0x00000400) &&
                            vehicleInfo_ != VehicleInfoModel.getDefaultInstance()) {
                        vehicleInfo_ =
                                VehicleInfoModel.newBuilder(vehicleInfo_).mergeFrom(value).buildPartial();
                    } else {
                        vehicleInfo_ = value;
                    }
                    onChanged();
                } else {
                    vehicleInfoBuilder_.mergeFrom(value);
                }
                bitField0_ |= 0x00000400;
                return this;
            }

            /**
             * <code>required .VehicleInfoModel VehicleInfo = 11;</code>
             */
            public Builder clearVehicleInfo() {
                if (vehicleInfoBuilder_ == null) {
                    vehicleInfo_ = VehicleInfoModel.getDefaultInstance();
                    onChanged();
                } else {
                    vehicleInfoBuilder_.clear();
                }
                bitField0_ = (bitField0_ & ~0x00000400);
                return this;
            }

            /**
             * <code>required .VehicleInfoModel VehicleInfo = 11;</code>
             */
            public VehicleInfoModel.Builder getVehicleInfoBuilder() {
                bitField0_ |= 0x00000400;
                onChanged();
                return getVehicleInfoFieldBuilder().getBuilder();
            }

            /**
             * <code>required .VehicleInfoModel VehicleInfo = 11;</code>
             */
            public VehicleInfoModelOrBuilder getVehicleInfoOrBuilder() {
                if (vehicleInfoBuilder_ != null) {
                    return vehicleInfoBuilder_.getMessageOrBuilder();
                } else {
                    return vehicleInfo_;
                }
            }

            /**
             * <code>required .VehicleInfoModel VehicleInfo = 11;</code>
             */
            private com.google.protobuf.SingleFieldBuilder<
                    VehicleInfoModel, VehicleInfoModel.Builder, VehicleInfoModelOrBuilder>
            getVehicleInfoFieldBuilder() {
                if (vehicleInfoBuilder_ == null) {
                    vehicleInfoBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                            VehicleInfoModel, VehicleInfoModel.Builder, VehicleInfoModelOrBuilder>(
                            vehicleInfo_,
                            getParentForChildren(),
                            isClean());
                    vehicleInfo_ = null;
                }
                return vehicleInfoBuilder_;
            }

            // required string MonitoringSiteID = 12;
            private Object monitoringSiteID_ = "";

            /**
             * <code>required string MonitoringSiteID = 12;</code>
             */
            public boolean hasMonitoringSiteID() {
                return ((bitField0_ & 0x00000800) == 0x00000800);
            }

            /**
             * <code>required string MonitoringSiteID = 12;</code>
             */
            public String getMonitoringSiteID() {
                Object ref = monitoringSiteID_;
                if (!(ref instanceof String)) {
                    String s = ((com.google.protobuf.ByteString) ref)
                            .toStringUtf8();
                    monitoringSiteID_ = s;
                    return s;
                } else {
                    return (String) ref;
                }
            }

            /**
             * <code>required string MonitoringSiteID = 12;</code>
             */
            public com.google.protobuf.ByteString
            getMonitoringSiteIDBytes() {
                Object ref = monitoringSiteID_;
                if (ref instanceof String) {
                    com.google.protobuf.ByteString b =
                            com.google.protobuf.ByteString.copyFromUtf8(
                                    (String) ref);
                    monitoringSiteID_ = b;
                    return b;
                } else {
                    return (com.google.protobuf.ByteString) ref;
                }
            }

            /**
             * <code>required string MonitoringSiteID = 12;</code>
             */
            public Builder setMonitoringSiteID(
                    String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000800;
                monitoringSiteID_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required string MonitoringSiteID = 12;</code>
             */
            public Builder clearMonitoringSiteID() {
                bitField0_ = (bitField0_ & ~0x00000800);
                monitoringSiteID_ = getDefaultInstance().getMonitoringSiteID();
                onChanged();
                return this;
            }

            /**
             * <code>required string MonitoringSiteID = 12;</code>
             */
            public Builder setMonitoringSiteIDBytes(
                    com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000800;
                monitoringSiteID_ = value;
                onChanged();
                return this;
            }

            // required int32 Dir = 13;
            private int dir_;

            /**
             * <code>required int32 Dir = 13;</code>
             */
            public boolean hasDir() {
                return ((bitField0_ & 0x00001000) == 0x00001000);
            }

            /**
             * <code>required int32 Dir = 13;</code>
             */
            public int getDir() {
                return dir_;
            }

            /**
             * <code>required int32 Dir = 13;</code>
             */
            public Builder setDir(int value) {
                bitField0_ |= 0x00001000;
                dir_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required int32 Dir = 13;</code>
             */
            public Builder clearDir() {
                bitField0_ = (bitField0_ & ~0x00001000);
                dir_ = 0;
                onChanged();
                return this;
            }

            // required int32 DetectType = 14;
            private int detectType_;

            /**
             * <code>required int32 DetectType = 14;</code>
             */
            public boolean hasDetectType() {
                return ((bitField0_ & 0x00002000) == 0x00002000);
            }

            /**
             * <code>required int32 DetectType = 14;</code>
             */
            public int getDetectType() {
                return detectType_;
            }

            /**
             * <code>required int32 DetectType = 14;</code>
             */
            public Builder setDetectType(int value) {
                bitField0_ |= 0x00002000;
                detectType_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required int32 DetectType = 14;</code>
             */
            public Builder clearDetectType() {
                bitField0_ = (bitField0_ & ~0x00002000);
                detectType_ = 0;
                onChanged();
                return this;
            }

            // required int32 PilotSafebelt = 15;
            private int pilotSafebelt_;

            /**
             * <code>required int32 PilotSafebelt = 15;</code>
             */
            public boolean hasPilotSafebelt() {
                return ((bitField0_ & 0x00004000) == 0x00004000);
            }

            /**
             * <code>required int32 PilotSafebelt = 15;</code>
             */
            public int getPilotSafebelt() {
                return pilotSafebelt_;
            }

            /**
             * <code>required int32 PilotSafebelt = 15;</code>
             */
            public Builder setPilotSafebelt(int value) {
                bitField0_ |= 0x00004000;
                pilotSafebelt_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required int32 PilotSafebelt = 15;</code>
             */
            public Builder clearPilotSafebelt() {
                bitField0_ = (bitField0_ & ~0x00004000);
                pilotSafebelt_ = 0;
                onChanged();
                return this;
            }

            // required int32 CopilotSafebelt = 16;
            private int copilotSafebelt_;

            /**
             * <code>required int32 CopilotSafebelt = 16;</code>
             */
            public boolean hasCopilotSafebelt() {
                return ((bitField0_ & 0x00008000) == 0x00008000);
            }

            /**
             * <code>required int32 CopilotSafebelt = 16;</code>
             */
            public int getCopilotSafebelt() {
                return copilotSafebelt_;
            }

            /**
             * <code>required int32 CopilotSafebelt = 16;</code>
             */
            public Builder setCopilotSafebelt(int value) {
                bitField0_ |= 0x00008000;
                copilotSafebelt_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required int32 CopilotSafebelt = 16;</code>
             */
            public Builder clearCopilotSafebelt() {
                bitField0_ = (bitField0_ & ~0x00008000);
                copilotSafebelt_ = 0;
                onChanged();
                return this;
            }

            // required int32 PilotSubVisor = 17;
            private int pilotSubVisor_;

            /**
             * <code>required int32 PilotSubVisor = 17;</code>
             */
            public boolean hasPilotSubVisor() {
                return ((bitField0_ & 0x00010000) == 0x00010000);
            }

            /**
             * <code>required int32 PilotSubVisor = 17;</code>
             */
            public int getPilotSubVisor() {
                return pilotSubVisor_;
            }

            /**
             * <code>required int32 PilotSubVisor = 17;</code>
             */
            public Builder setPilotSubVisor(int value) {
                bitField0_ |= 0x00010000;
                pilotSubVisor_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required int32 PilotSubVisor = 17;</code>
             */
            public Builder clearPilotSubVisor() {
                bitField0_ = (bitField0_ & ~0x00010000);
                pilotSubVisor_ = 0;
                onChanged();
                return this;
            }

            // required int32 CopilotSubVisor = 18;
            private int copilotSubVisor_;

            /**
             * <code>required int32 CopilotSubVisor = 18;</code>
             */
            public boolean hasCopilotSubVisor() {
                return ((bitField0_ & 0x00020000) == 0x00020000);
            }

            /**
             * <code>required int32 CopilotSubVisor = 18;</code>
             */
            public int getCopilotSubVisor() {
                return copilotSubVisor_;
            }

            /**
             * <code>required int32 CopilotSubVisor = 18;</code>
             */
            public Builder setCopilotSubVisor(int value) {
                bitField0_ |= 0x00020000;
                copilotSubVisor_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required int32 CopilotSubVisor = 18;</code>
             */
            public Builder clearCopilotSubVisor() {
                bitField0_ = (bitField0_ & ~0x00020000);
                copilotSubVisor_ = 0;
                onChanged();
                return this;
            }

            // required int32 PilotCall = 19;
            private int pilotCall_;

            /**
             * <code>required int32 PilotCall = 19;</code>
             */
            public boolean hasPilotCall() {
                return ((bitField0_ & 0x00040000) == 0x00040000);
            }

            /**
             * <code>required int32 PilotCall = 19;</code>
             */
            public int getPilotCall() {
                return pilotCall_;
            }

            /**
             * <code>required int32 PilotCall = 19;</code>
             */
            public Builder setPilotCall(int value) {
                bitField0_ |= 0x00040000;
                pilotCall_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required int32 PilotCall = 19;</code>
             */
            public Builder clearPilotCall() {
                bitField0_ = (bitField0_ & ~0x00040000);
                pilotCall_ = 0;
                onChanged();
                return this;
            }

            // required int32 AlarmDataType = 20;
            private int alarmDataType_;

            /**
             * <code>required int32 AlarmDataType = 20;</code>
             */
            public boolean hasAlarmDataType() {
                return ((bitField0_ & 0x00080000) == 0x00080000);
            }

            /**
             * <code>required int32 AlarmDataType = 20;</code>
             */
            public int getAlarmDataType() {
                return alarmDataType_;
            }

            /**
             * <code>required int32 AlarmDataType = 20;</code>
             */
            public Builder setAlarmDataType(int value) {
                bitField0_ |= 0x00080000;
                alarmDataType_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required int32 AlarmDataType = 20;</code>
             */
            public Builder clearAlarmDataType() {
                bitField0_ = (bitField0_ & ~0x00080000);
                alarmDataType_ = 0;
                onChanged();
                return this;
            }

            // required string llegalTime = 21;
            private Object llegalTime_ = "";

            /**
             * <code>required string llegalTime = 21;</code>
             */
            public boolean hasLlegalTime() {
                return ((bitField0_ & 0x00100000) == 0x00100000);
            }

            /**
             * <code>required string llegalTime = 21;</code>
             */
            public String getLlegalTime() {
                Object ref = llegalTime_;
                if (!(ref instanceof String)) {
                    String s = ((com.google.protobuf.ByteString) ref)
                            .toStringUtf8();
                    llegalTime_ = s;
                    return s;
                } else {
                    return (String) ref;
                }
            }

            /**
             * <code>required string llegalTime = 21;</code>
             */
            public com.google.protobuf.ByteString
            getLlegalTimeBytes() {
                Object ref = llegalTime_;
                if (ref instanceof String) {
                    com.google.protobuf.ByteString b =
                            com.google.protobuf.ByteString.copyFromUtf8(
                                    (String) ref);
                    llegalTime_ = b;
                    return b;
                } else {
                    return (com.google.protobuf.ByteString) ref;
                }
            }

            /**
             * <code>required string llegalTime = 21;</code>
             */
            public Builder setLlegalTime(
                    String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00100000;
                llegalTime_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required string llegalTime = 21;</code>
             */
            public Builder clearLlegalTime() {
                bitField0_ = (bitField0_ & ~0x00100000);
                llegalTime_ = getDefaultInstance().getLlegalTime();
                onChanged();
                return this;
            }

            /**
             * <code>required string llegalTime = 21;</code>
             */
            public Builder setLlegalTimeBytes(
                    com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00100000;
                llegalTime_ = value;
                onChanged();
                return this;
            }

            // required int32 IllegalTimer = 22;
            private int illegalTimer_;

            /**
             * <code>required int32 IllegalTimer = 22;</code>
             */
            public boolean hasIllegalTimer() {
                return ((bitField0_ & 0x00200000) == 0x00200000);
            }

            /**
             * <code>required int32 IllegalTimer = 22;</code>
             */
            public int getIllegalTimer() {
                return illegalTimer_;
            }

            /**
             * <code>required int32 IllegalTimer = 22;</code>
             */
            public Builder setIllegalTimer(int value) {
                bitField0_ |= 0x00200000;
                illegalTimer_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required int32 IllegalTimer = 22;</code>
             */
            public Builder clearIllegalTimer() {
                bitField0_ = (bitField0_ & ~0x00200000);
                illegalTimer_ = 0;
                onChanged();
                return this;
            }

            // required int32 PicNum = 23;
            private int picNum_;

            /**
             * <code>required int32 PicNum = 23;</code>
             */
            public boolean hasPicNum() {
                return ((bitField0_ & 0x00400000) == 0x00400000);
            }

            /**
             * <code>required int32 PicNum = 23;</code>
             */
            public int getPicNum() {
                return picNum_;
            }

            /**
             * <code>required int32 PicNum = 23;</code>
             */
            public Builder setPicNum(int value) {
                bitField0_ |= 0x00400000;
                picNum_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required int32 PicNum = 23;</code>
             */
            public Builder clearPicNum() {
                bitField0_ = (bitField0_ & ~0x00400000);
                picNum_ = 0;
                onChanged();
                return this;
            }

            // repeated .PicInfoModel PicInfo = 24;
            private java.util.List<PicInfoModel> picInfo_ =
                    java.util.Collections.emptyList();

            private void ensurePicInfoIsMutable() {
                if (!((bitField0_ & 0x00800000) == 0x00800000)) {
                    picInfo_ = new java.util.ArrayList<PicInfoModel>(picInfo_);
                    bitField0_ |= 0x00800000;
                }
            }

            private com.google.protobuf.RepeatedFieldBuilder<
                    PicInfoModel, PicInfoModel.Builder, PicInfoModelOrBuilder> picInfoBuilder_;

            /**
             * <code>repeated .PicInfoModel PicInfo = 24;</code>
             */
            public java.util.List<PicInfoModel> getPicInfoList() {
                if (picInfoBuilder_ == null) {
                    return java.util.Collections.unmodifiableList(picInfo_);
                } else {
                    return picInfoBuilder_.getMessageList();
                }
            }

            /**
             * <code>repeated .PicInfoModel PicInfo = 24;</code>
             */
            public int getPicInfoCount() {
                if (picInfoBuilder_ == null) {
                    return picInfo_.size();
                } else {
                    return picInfoBuilder_.getCount();
                }
            }

            /**
             * <code>repeated .PicInfoModel PicInfo = 24;</code>
             */
            public PicInfoModel getPicInfo(int index) {
                if (picInfoBuilder_ == null) {
                    return picInfo_.get(index);
                } else {
                    return picInfoBuilder_.getMessage(index);
                }
            }

            /**
             * <code>repeated .PicInfoModel PicInfo = 24;</code>
             */
            public Builder setPicInfo(
                    int index, PicInfoModel value) {
                if (picInfoBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensurePicInfoIsMutable();
                    picInfo_.set(index, value);
                    onChanged();
                } else {
                    picInfoBuilder_.setMessage(index, value);
                }
                return this;
            }

            /**
             * <code>repeated .PicInfoModel PicInfo = 24;</code>
             */
            public Builder setPicInfo(
                    int index, PicInfoModel.Builder builderForValue) {
                if (picInfoBuilder_ == null) {
                    ensurePicInfoIsMutable();
                    picInfo_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    picInfoBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .PicInfoModel PicInfo = 24;</code>
             */
            public Builder addPicInfo(PicInfoModel value) {
                if (picInfoBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensurePicInfoIsMutable();
                    picInfo_.add(value);
                    onChanged();
                } else {
                    picInfoBuilder_.addMessage(value);
                }
                return this;
            }

            /**
             * <code>repeated .PicInfoModel PicInfo = 24;</code>
             */
            public Builder addPicInfo(
                    int index, PicInfoModel value) {
                if (picInfoBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensurePicInfoIsMutable();
                    picInfo_.add(index, value);
                    onChanged();
                } else {
                    picInfoBuilder_.addMessage(index, value);
                }
                return this;
            }

            /**
             * <code>repeated .PicInfoModel PicInfo = 24;</code>
             */
            public Builder addPicInfo(
                    PicInfoModel.Builder builderForValue) {
                if (picInfoBuilder_ == null) {
                    ensurePicInfoIsMutable();
                    picInfo_.add(builderForValue.build());
                    onChanged();
                } else {
                    picInfoBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .PicInfoModel PicInfo = 24;</code>
             */
            public Builder addPicInfo(
                    int index, PicInfoModel.Builder builderForValue) {
                if (picInfoBuilder_ == null) {
                    ensurePicInfoIsMutable();
                    picInfo_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    picInfoBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .PicInfoModel PicInfo = 24;</code>
             */
            public Builder addAllPicInfo(
                    Iterable<? extends PicInfoModel> values) {
                if (picInfoBuilder_ == null) {
                    ensurePicInfoIsMutable();
                    super.addAll(values, picInfo_);
                    onChanged();
                } else {
                    picInfoBuilder_.addAllMessages(values);
                }
                return this;
            }

            /**
             * <code>repeated .PicInfoModel PicInfo = 24;</code>
             */
            public Builder clearPicInfo() {
                if (picInfoBuilder_ == null) {
                    picInfo_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00800000);
                    onChanged();
                } else {
                    picInfoBuilder_.clear();
                }
                return this;
            }

            /**
             * <code>repeated .PicInfoModel PicInfo = 24;</code>
             */
            public Builder removePicInfo(int index) {
                if (picInfoBuilder_ == null) {
                    ensurePicInfoIsMutable();
                    picInfo_.remove(index);
                    onChanged();
                } else {
                    picInfoBuilder_.remove(index);
                }
                return this;
            }

            /**
             * <code>repeated .PicInfoModel PicInfo = 24;</code>
             */
            public PicInfoModel.Builder getPicInfoBuilder(
                    int index) {
                return getPicInfoFieldBuilder().getBuilder(index);
            }

            /**
             * <code>repeated .PicInfoModel PicInfo = 24;</code>
             */
            public PicInfoModelOrBuilder getPicInfoOrBuilder(
                    int index) {
                if (picInfoBuilder_ == null) {
                    return picInfo_.get(index);
                } else {
                    return picInfoBuilder_.getMessageOrBuilder(index);
                }
            }

            /**
             * <code>repeated .PicInfoModel PicInfo = 24;</code>
             */
            public java.util.List<? extends PicInfoModelOrBuilder>
            getPicInfoOrBuilderList() {
                if (picInfoBuilder_ != null) {
                    return picInfoBuilder_.getMessageOrBuilderList();
                } else {
                    return java.util.Collections.unmodifiableList(picInfo_);
                }
            }

            /**
             * <code>repeated .PicInfoModel PicInfo = 24;</code>
             */
            public PicInfoModel.Builder addPicInfoBuilder() {
                return getPicInfoFieldBuilder().addBuilder(
                        PicInfoModel.getDefaultInstance());
            }

            /**
             * <code>repeated .PicInfoModel PicInfo = 24;</code>
             */
            public PicInfoModel.Builder addPicInfoBuilder(
                    int index) {
                return getPicInfoFieldBuilder().addBuilder(
                        index, PicInfoModel.getDefaultInstance());
            }

            /**
             * <code>repeated .PicInfoModel PicInfo = 24;</code>
             */
            public java.util.List<PicInfoModel.Builder>
            getPicInfoBuilderList() {
                return getPicInfoFieldBuilder().getBuilderList();
            }

            private com.google.protobuf.RepeatedFieldBuilder<
                    PicInfoModel, PicInfoModel.Builder, PicInfoModelOrBuilder>
            getPicInfoFieldBuilder() {
                if (picInfoBuilder_ == null) {
                    picInfoBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
                            PicInfoModel, PicInfoModel.Builder, PicInfoModelOrBuilder>(
                            picInfo_,
                            ((bitField0_ & 0x00800000) == 0x00800000),
                            getParentForChildren(),
                            isClean());
                    picInfo_ = null;
                }
                return picInfoBuilder_;
            }

            // optional int32 Validity = 25;
            private int validity_;

            /**
             * <code>optional int32 Validity = 25;</code>
             */
            public boolean hasValidity() {
                return ((bitField0_ & 0x01000000) == 0x01000000);
            }

            /**
             * <code>optional int32 Validity = 25;</code>
             */
            public int getValidity() {
                return validity_;
            }

            /**
             * <code>optional int32 Validity = 25;</code>
             */
            public Builder setValidity(int value) {
                bitField0_ |= 0x01000000;
                validity_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional int32 Validity = 25;</code>
             */
            public Builder clearValidity() {
                bitField0_ = (bitField0_ & ~0x01000000);
                validity_ = 0;
                onChanged();
                return this;
            }

            // optional int32 WaitedLength = 26;
            private int waitedLength_;

            /**
             * <code>optional int32 WaitedLength = 26;</code>
             */
            public boolean hasWaitedLength() {
                return ((bitField0_ & 0x02000000) == 0x02000000);
            }

            /**
             * <code>optional int32 WaitedLength = 26;</code>
             */
            public int getWaitedLength() {
                return waitedLength_;
            }

            /**
             * <code>optional int32 WaitedLength = 26;</code>
             */
            public Builder setWaitedLength(int value) {
                bitField0_ |= 0x02000000;
                waitedLength_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional int32 WaitedLength = 26;</code>
             */
            public Builder clearWaitedLength() {
                bitField0_ = (bitField0_ & ~0x02000000);
                waitedLength_ = 0;
                onChanged();
                return this;
            }

            // @@protoc_insertion_point(builder_scope:OffenceSnapData)
        }

        static {
            defaultInstance = new OffenceSnapData(true);
            defaultInstance.initFields();
        }

        // @@protoc_insertion_point(class_scope:OffenceSnapData)
    }

    private static com.google.protobuf.Descriptors.Descriptor
            internal_static_PlateInfoModel_descriptor;
    private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internal_static_PlateInfoModel_fieldAccessorTable;
    private static com.google.protobuf.Descriptors.Descriptor
            internal_static_VehicleInfoModel_descriptor;
    private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internal_static_VehicleInfoModel_fieldAccessorTable;
    private static com.google.protobuf.Descriptors.Descriptor
            internal_static_PlateRectModel_descriptor;
    private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internal_static_PlateRectModel_fieldAccessorTable;
    private static com.google.protobuf.Descriptors.Descriptor
            internal_static_PicInfoModel_descriptor;
    private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internal_static_PicInfoModel_fieldAccessorTable;
    private static com.google.protobuf.Descriptors.Descriptor
            internal_static_OffenceSnapData_descriptor;
    private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internal_static_OffenceSnapData_fieldAccessorTable;

    public static com.google.protobuf.Descriptors.FileDescriptor
    getDescriptor() {
        return descriptor;
    }

    private static com.google.protobuf.Descriptors.FileDescriptor
            descriptor;

    static {
        String[] descriptorData = {
                "\n\025OffenceSnapData.proto\"\211\001\n\016PlateInfoMod" +
                        "el\022\021\n\tPlateType\030\001 \001(\t\022\r\n\005Color\030\002 \001(\t\022\016\n\006" +
                        "Bright\030\003 \002(\005\022\022\n\nLicenseLen\030\004 \002(\005\022\017\n\007Coun" +
                        "try\030\005 \002(\005\022\017\n\007License\030\006 \002(\t\022\017\n\007Believe\030\007 " +
                        "\002(\t\"\332\001\n\020VehicleInfoModel\022\r\n\005Index\030\001 \002(\005\022" +
                        "\023\n\013VehicleType\030\002 \002(\005\022\022\n\nColorDepth\030\003 \002(\005" +
                        "\022\r\n\005Color\030\004 \001(\t\022\r\n\005Speed\030\005 \002(\002\022\016\n\006Length" +
                        "\030\006 \002(\002\022\023\n\013IllegalType\030\007 \002(\005\022\030\n\020VehicleLo" +
                        "goRecog\030\010 \001(\t\022\033\n\023VehicleSubLogoRecog\030\t \001" +
                        "(\t\022\024\n\014VehicleModel\030\n \001(\t\"E\n\016PlateRectMod",
                "el\022\t\n\001X\030\001 \002(\005\022\t\n\001Y\030\002 \002(\005\022\r\n\005Width\030\003 \002(\005\022" +
                        "\016\n\006Height\030\004 \002(\005\"z\n\014PicInfoModel\022\014\n\004Type\030" +
                        "\001 \002(\005\022\024\n\014PicRecogMode\030\002 \002(\005\022\024\n\014RedLightT" +
                        "ime\030\003 \002(\005\022\"\n\tPlateRect\030\004 \002(\0132\017.PlateRect" +
                        "Model\022\014\n\004Data\030\005 \002(\t\"\331\004\n\017OffenceSnapData\022" +
                        "\n\n\002Id\030\001 \002(\t\022\021\n\tDriveChan\030\002 \002(\005\022\023\n\013Vehicl" +
                        "eType\030\003 \002(\005\022\030\n\020VehicleAttribute\030\004 \002(\005\022\023\n" +
                        "\013IllegalType\030\005 \002(\005\022\026\n\016IllegalSubType\030\006 \002" +
                        "(\t\022\021\n\tPostPicNo\030\007 \002(\005\022\021\n\tChanIndex\030\010 \002(\005" +
                        "\022\022\n\nSpeedLimit\030\t \002(\005\022\"\n\tPlateInfo\030\n \002(\0132",
                "\017.PlateInfoModel\022&\n\013VehicleInfo\030\013 \002(\0132\021." +
                        "VehicleInfoModel\022\030\n\020MonitoringSiteID\030\014 \002" +
                        "(\t\022\013\n\003Dir\030\r \002(\005\022\022\n\nDetectType\030\016 \002(\005\022\025\n\rP" +
                        "ilotSafebelt\030\017 \002(\005\022\027\n\017CopilotSafebelt\030\020 " +
                        "\002(\005\022\025\n\rPilotSubVisor\030\021 \002(\005\022\027\n\017CopilotSub" +
                        "Visor\030\022 \002(\005\022\021\n\tPilotCall\030\023 \002(\005\022\025\n\rAlarmD" +
                        "ataType\030\024 \002(\005\022\022\n\nllegalTime\030\025 \002(\t\022\024\n\014Ill" +
                        "egalTimer\030\026 \002(\005\022\016\n\006PicNum\030\027 \002(\005\022\036\n\007PicIn" +
                        "fo\030\030 \003(\0132\r.PicInfoModel\022\020\n\010Validity\030\031 \001(" +
                        "\005\022\024\n\014WaitedLength\030\032 \001(\005B*\n\021com.kmlc.prot",
                "obufB\025OffenceSnapDataProtos"
        };
        com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
                new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
                    public com.google.protobuf.ExtensionRegistry assignDescriptors(
                            com.google.protobuf.Descriptors.FileDescriptor root) {
                        descriptor = root;
                        internal_static_PlateInfoModel_descriptor =
                                getDescriptor().getMessageTypes().get(0);
                        internal_static_PlateInfoModel_fieldAccessorTable = new
                                com.google.protobuf.GeneratedMessage.FieldAccessorTable(
                                internal_static_PlateInfoModel_descriptor,
                                new String[]{"PlateType", "Color", "Bright", "LicenseLen", "Country", "License", "Believe",});
                        internal_static_VehicleInfoModel_descriptor =
                                getDescriptor().getMessageTypes().get(1);
                        internal_static_VehicleInfoModel_fieldAccessorTable = new
                                com.google.protobuf.GeneratedMessage.FieldAccessorTable(
                                internal_static_VehicleInfoModel_descriptor,
                                new String[]{"Index", "VehicleType", "ColorDepth", "Color", "Speed", "Length", "IllegalType", "VehicleLogoRecog", "VehicleSubLogoRecog", "VehicleModel",});
                        internal_static_PlateRectModel_descriptor =
                                getDescriptor().getMessageTypes().get(2);
                        internal_static_PlateRectModel_fieldAccessorTable = new
                                com.google.protobuf.GeneratedMessage.FieldAccessorTable(
                                internal_static_PlateRectModel_descriptor,
                                new String[]{"X", "Y", "Width", "Height",});
                        internal_static_PicInfoModel_descriptor =
                                getDescriptor().getMessageTypes().get(3);
                        internal_static_PicInfoModel_fieldAccessorTable = new
                                com.google.protobuf.GeneratedMessage.FieldAccessorTable(
                                internal_static_PicInfoModel_descriptor,
                                new String[]{"Type", "PicRecogMode", "RedLightTime", "PlateRect", "Data",});
                        internal_static_OffenceSnapData_descriptor =
                                getDescriptor().getMessageTypes().get(4);
                        internal_static_OffenceSnapData_fieldAccessorTable = new
                                com.google.protobuf.GeneratedMessage.FieldAccessorTable(
                                internal_static_OffenceSnapData_descriptor,
                                new String[]{"Id", "DriveChan", "VehicleType", "VehicleAttribute", "IllegalType", "IllegalSubType", "PostPicNo", "ChanIndex", "SpeedLimit", "PlateInfo", "VehicleInfo", "MonitoringSiteID", "Dir", "DetectType", "PilotSafebelt", "CopilotSafebelt", "PilotSubVisor", "CopilotSubVisor", "PilotCall", "AlarmDataType", "LlegalTime", "IllegalTimer", "PicNum", "PicInfo", "Validity", "WaitedLength",});
                        return null;
                    }
                };
        com.google.protobuf.Descriptors.FileDescriptor
                .internalBuildGeneratedFileFrom(descriptorData,
                        new com.google.protobuf.Descriptors.FileDescriptor[]{
                        }, assigner);
    }

    // @@protoc_insertion_point(outer_class_scope)
}
